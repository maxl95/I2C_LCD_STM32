
I2CDisplay1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080086b4  080086b4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086b4  080086b4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000017c  08008838  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  08008838  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010155  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc0  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00033e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c8e  00000000  00000000  00034a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012168  00000000  00000000  0004e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087111  00000000  00000000  00060856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  000e79b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080085f0 	.word	0x080085f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080085f0 	.word	0x080085f0

0800014c <lcd_send_cmd>:
// #define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
char LCD_SLAVE_ADDRESS;
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7b7b      	ldrb	r3, [r7, #13]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7b7b      	ldrb	r3, [r7, #13]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7b3b      	ldrb	r3, [r7, #12]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7b3b      	ldrb	r3, [r7, #12]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]

	if(LCD_BACKLIGHT == 0) {
 800018c:	4b1f      	ldr	r3, [pc, #124]	; (800020c <lcd_send_cmd+0xc0>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d116      	bne.n	80001c2 <lcd_send_cmd+0x76>
		for(uint8_t i = 0; i <= 3; i++) {
 8000194:	2300      	movs	r3, #0
 8000196:	73fb      	strb	r3, [r7, #15]
 8000198:	e00f      	b.n	80001ba <lcd_send_cmd+0x6e>
			data_t[i] &= ~(1UL << 3);
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	3310      	adds	r3, #16
 800019e:	443b      	add	r3, r7
 80001a0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	f022 0208 	bic.w	r2, r2, #8
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	3310      	adds	r3, #16
 80001ae:	443b      	add	r3, r7
 80001b0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	3301      	adds	r3, #1
 80001b8:	73fb      	strb	r3, [r7, #15]
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	2b03      	cmp	r3, #3
 80001be:	d9ec      	bls.n	800019a <lcd_send_cmd+0x4e>
 80001c0:	e015      	b.n	80001ee <lcd_send_cmd+0xa2>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00f      	b.n	80001e8 <lcd_send_cmd+0x9c>
			data_t[i] |= 1UL << 3;
 80001c8:	7bbb      	ldrb	r3, [r7, #14]
 80001ca:	3310      	adds	r3, #16
 80001cc:	443b      	add	r3, r7
 80001ce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80001d2:	7bbb      	ldrb	r3, [r7, #14]
 80001d4:	f042 0208 	orr.w	r2, r2, #8
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	3310      	adds	r3, #16
 80001dc:	443b      	add	r3, r7
 80001de:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	3301      	adds	r3, #1
 80001e6:	73bb      	strb	r3, [r7, #14]
 80001e8:	7bbb      	ldrb	r3, [r7, #14]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d9ec      	bls.n	80001c8 <lcd_send_cmd+0x7c>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <lcd_send_cmd+0xc4>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	b299      	uxth	r1, r3
 80001f4:	f107 0208 	add.w	r2, r7, #8
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2304      	movs	r3, #4
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <lcd_send_cmd+0xc8>)
 8000200:	f000 ffc2 	bl	8001188 <HAL_I2C_Master_Transmit>
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000199 	.word	0x20000199
 8000210:	20000198 	.word	0x20000198
 8000214:	2000019c 	.word	0x2000019c

08000218 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f023 030f 	bic.w	r3, r3, #15
 8000228:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	011b      	lsls	r3, r3, #4
 800022e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000230:	7b7b      	ldrb	r3, [r7, #13]
 8000232:	f043 030d 	orr.w	r3, r3, #13
 8000236:	b2db      	uxtb	r3, r3
 8000238:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800023a:	7b7b      	ldrb	r3, [r7, #13]
 800023c:	f043 0309 	orr.w	r3, r3, #9
 8000240:	b2db      	uxtb	r3, r3
 8000242:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000244:	7b3b      	ldrb	r3, [r7, #12]
 8000246:	f043 030d 	orr.w	r3, r3, #13
 800024a:	b2db      	uxtb	r3, r3
 800024c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800024e:	7b3b      	ldrb	r3, [r7, #12]
 8000250:	f043 0309 	orr.w	r3, r3, #9
 8000254:	b2db      	uxtb	r3, r3
 8000256:	72fb      	strb	r3, [r7, #11]

	if(LCD_BACKLIGHT == 0) {
 8000258:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <lcd_send_data+0xc0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d116      	bne.n	800028e <lcd_send_data+0x76>
		for(uint8_t i = 0; i <= 3; i++) {
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e00f      	b.n	8000286 <lcd_send_data+0x6e>
			data_t[i] &= ~(1UL << 3);
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3310      	adds	r3, #16
 800026a:	443b      	add	r3, r7
 800026c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	f022 0208 	bic.w	r2, r2, #8
 8000276:	b2d2      	uxtb	r2, r2
 8000278:	3310      	adds	r3, #16
 800027a:	443b      	add	r3, r7
 800027c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	3301      	adds	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d9ec      	bls.n	8000266 <lcd_send_data+0x4e>
 800028c:	e015      	b.n	80002ba <lcd_send_data+0xa2>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800028e:	2300      	movs	r3, #0
 8000290:	73bb      	strb	r3, [r7, #14]
 8000292:	e00f      	b.n	80002b4 <lcd_send_data+0x9c>
			data_t[i] |= 1UL << 3;
 8000294:	7bbb      	ldrb	r3, [r7, #14]
 8000296:	3310      	adds	r3, #16
 8000298:	443b      	add	r3, r7
 800029a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800029e:	7bbb      	ldrb	r3, [r7, #14]
 80002a0:	f042 0208 	orr.w	r2, r2, #8
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	3310      	adds	r3, #16
 80002a8:	443b      	add	r3, r7
 80002aa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002ae:	7bbb      	ldrb	r3, [r7, #14]
 80002b0:	3301      	adds	r3, #1
 80002b2:	73bb      	strb	r3, [r7, #14]
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d9ec      	bls.n	8000294 <lcd_send_data+0x7c>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t *) data_t, 4, 100);
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <lcd_send_data+0xc4>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b299      	uxth	r1, r3
 80002c0:	f107 0208 	add.w	r2, r7, #8
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2304      	movs	r3, #4
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <lcd_send_data+0xc8>)
 80002cc:	f000 ff5c 	bl	8001188 <HAL_I2C_Master_Transmit>
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000199 	.word	0x20000199
 80002dc:	20000198 	.word	0x20000198
 80002e0:	2000019c 	.word	0x2000019c

080002e4 <lcd_clear>:

void lcd_clear (void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
	for (int i=0; i<70; i++)
	{
		lcd_send_data (' ');
	}*/
	lcd_send_cmd(0x01);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f7ff ff2f 	bl	800014c <lcd_send_cmd>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
    switch (row)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d81f      	bhi.n	8000344 <lcd_put_cur+0x50>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <lcd_put_cur+0x18>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	0800031d 	.word	0x0800031d
 8000310:	08000327 	.word	0x08000327
 8000314:	08000331 	.word	0x08000331
 8000318:	0800033b 	.word	0x0800033b
    {
        case 0:
            col |= 0x80;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000322:	603b      	str	r3, [r7, #0]
            break;
 8000324:	e00e      	b.n	8000344 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800032c:	603b      	str	r3, [r7, #0]
            break;
 800032e:	e009      	b.n	8000344 <lcd_put_cur+0x50>
        case 2:
            col |= 0x90;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000336:	603b      	str	r3, [r7, #0]
            break;
 8000338:	e004      	b.n	8000344 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD0;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000340:	603b      	str	r3, [r7, #0]
            break;
 8000342:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff feff 	bl	800014c <lcd_send_cmd>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop

08000358 <lcd_init>:


void lcd_init (char *addr)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	LCD_SLAVE_ADDRESS = addr;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <lcd_init+0x8c>)
 8000366:	701a      	strb	r2, [r3, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000368:	2032      	movs	r0, #50	; 0x32
 800036a:	f000 fafb 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x30);
 800036e:	2030      	movs	r0, #48	; 0x30
 8000370:	f7ff feec 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000374:	2005      	movs	r0, #5
 8000376:	f000 faf5 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x30);
 800037a:	2030      	movs	r0, #48	; 0x30
 800037c:	f7ff fee6 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000380:	2001      	movs	r0, #1
 8000382:	f000 faef 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000386:	2030      	movs	r0, #48	; 0x30
 8000388:	f7ff fee0 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800038c:	200a      	movs	r0, #10
 800038e:	f000 fae9 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000392:	2020      	movs	r0, #32
 8000394:	f7ff feda 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f000 fae3 	bl	8000964 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800039e:	2028      	movs	r0, #40	; 0x28
 80003a0:	f7ff fed4 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fadd 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003aa:	2008      	movs	r0, #8
 80003ac:	f7ff fece 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 fad7 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003b6:	2001      	movs	r0, #1
 80003b8:	f7ff fec8 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fad1 	bl	8000964 <HAL_Delay>
	HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 face 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80003c8:	2006      	movs	r0, #6
 80003ca:	f7ff febf 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 fac8 	bl	8000964 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80003d4:	200c      	movs	r0, #12
 80003d6:	f7ff feb9 	bl	800014c <lcd_send_cmd>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000198 	.word	0x20000198

080003e8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003f0:	e006      	b.n	8000400 <lcd_send_string+0x18>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	607a      	str	r2, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff0c 	bl	8000218 <lcd_send_data>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1f4      	bne.n	80003f2 <lcd_send_string+0xa>
}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <lcd_test>:

void lcd_test (void)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
	for(int r = 0; r < 4; r++) {
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	e015      	b.n	800044a <lcd_test+0x38>
		lcd_put_cur(r, 0);
 800041e:	2100      	movs	r1, #0
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f7ff ff67 	bl	80002f4 <lcd_put_cur>
		for(int s = 0; s < 16; s++) {
 8000426:	2300      	movs	r3, #0
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	e008      	b.n	800043e <lcd_test+0x2c>
			lcd_send_data (0xFF);
 800042c:	20ff      	movs	r0, #255	; 0xff
 800042e:	f7ff fef3 	bl	8000218 <lcd_send_data>
			HAL_Delay(10);
 8000432:	200a      	movs	r0, #10
 8000434:	f000 fa96 	bl	8000964 <HAL_Delay>
		for(int s = 0; s < 16; s++) {
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b0f      	cmp	r3, #15
 8000442:	ddf3      	ble.n	800042c <lcd_test+0x1a>
	for(int r = 0; r < 4; r++) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b03      	cmp	r3, #3
 800044e:	dde6      	ble.n	800041e <lcd_test+0xc>
		}
	}
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <lcd_backlight>:

void lcd_backlight (char state)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000466:	4a05      	ldr	r2, [pc, #20]	; (800047c <lcd_backlight+0x20>)
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff fe6d 	bl	800014c <lcd_send_cmd>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000199 	.word	0x20000199

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fa0c 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f844 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f8ca 	bl	8000624 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000490:	f000 f89a 	bl	80005c8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000494:	f007 fc0a 	bl	8007cac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  	lcd_init (LCD_ADDR);		// initializes the display with the given I2C address
 8000498:	204e      	movs	r0, #78	; 0x4e
 800049a:	f7ff ff5d 	bl	8000358 <lcd_init>

  	lcd_backlight(1);			// turns on the backlight
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff ffdc 	bl	800045c <lcd_backlight>

  	lcd_test ();				// draws a test pattern to test every single pixel
 80004a4:	f7ff ffb5 	bl	8000412 <lcd_test>

  	HAL_Delay(500);				// wait 500ms
 80004a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ac:	f000 fa5a 	bl	8000964 <HAL_Delay>

  	lcd_clear ();				// clears the display
 80004b0:	f7ff ff18 	bl	80002e4 <lcd_clear>

  	HAL_Delay(500);				// wait another 500ms
 80004b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b8:	f000 fa54 	bl	8000964 <HAL_Delay>

  	lcd_put_cur(0, 1);			// puts the cursor to position row=0, column=1
 80004bc:	2101      	movs	r1, #1
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ff18 	bl	80002f4 <lcd_put_cur>

  	lcd_send_string ("STM32 I2C-Lib"); // writes the given string to the display
 80004c4:	480f      	ldr	r0, [pc, #60]	; (8000504 <main+0x84>)
 80004c6:	f7ff ff8f 	bl	80003e8 <lcd_send_string>

  	lcd_put_cur(1, 0);			// puts the cursor to position row=1, column=0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff ff11 	bl	80002f4 <lcd_put_cur>

  	lcd_send_string ("for STM32CubeIDE");	// writes the given string to the display
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <main+0x88>)
 80004d4:	f7ff ff88 	bl	80003e8 <lcd_send_string>

  	lcd_put_cur(2, 0);			// puts the cursor to position row=2, column=0
 80004d8:	2100      	movs	r1, #0
 80004da:	2002      	movs	r0, #2
 80004dc:	f7ff ff0a 	bl	80002f4 <lcd_put_cur>

  	lcd_send_string ("----------------");	// writes the given string to the display
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <main+0x8c>)
 80004e2:	f7ff ff81 	bl	80003e8 <lcd_send_string>

  	lcd_put_cur(3, 1);			// puts the cursor to position row=3, column=1
 80004e6:	2101      	movs	r1, #1
 80004e8:	2003      	movs	r0, #3
 80004ea:	f7ff ff03 	bl	80002f4 <lcd_put_cur>

  	lcd_send_string ("github/maxl95");	// writes the given string to the display
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x90>)
 80004f0:	f7ff ff7a 	bl	80003e8 <lcd_send_string>

  	HAL_Delay(2500);				// wait another 500ms
 80004f4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80004f8:	f000 fa34 	bl	8000964 <HAL_Delay>

  	lcd_backlight(0);			// turns off the backlight
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ffad 	bl	800045c <lcd_backlight>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x82>
 8000504:	08008608 	.word	0x08008608
 8000508:	08008618 	.word	0x08008618
 800050c:	0800862c 	.word	0x0800862c
 8000510:	08008640 	.word	0x08008640

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f008 f85c 	bl	80085e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000560:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fdd6 	bl	800311c <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000576:	f000 f8ad 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f003 f842 	bl	8003620 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005a2:	f000 f897 	bl	80006d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005a6:	2310      	movs	r3, #16
 80005a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f9b9 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005bc:	f000 f88a 	bl	80006d4 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fc7b 	bl	8000f00 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f860 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000019c 	.word	0x2000019c
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_GPIO_Init+0xa8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a23      	ldr	r2, [pc, #140]	; (80006cc <MX_GPIO_Init+0xa8>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_GPIO_Init+0xa8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_GPIO_Init+0xa8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <MX_GPIO_Init+0xa8>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a11      	ldr	r2, [pc, #68]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0xa8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0xac>)
 80006a0:	f000 fc16 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0xac>)
 80006be:	f000 fa83 	bl	8000bc8 <HAL_GPIO_Init>

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40011000 	.word	0x40011000

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_MspInit+0x5c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x5c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_MspInit+0x60>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_MspInit+0x60>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000

08000744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <HAL_I2C_MspInit+0x90>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d132      	bne.n	80007ca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <HAL_I2C_MspInit+0x98>)
 8000792:	f000 fa19 	bl	8000bc8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_I2C_MspInit+0x9c>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <HAL_I2C_MspInit+0x9c>)
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_I2C_MspInit+0x94>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40010000 	.word	0x40010000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 f87f 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800083a:	f001 f8dc 	bl	80019f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000e8c 	.word	0x20000e8c

08000848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087a:	f7ff ffe5 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f007 fe8b 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fdfd 	bl	8000480 <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000890:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 8000894:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000898:	20001398 	.word	0x20001398

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f947 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff ff10 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f95f 	bl	8000bae <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f927 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	200001f0 	.word	0x200001f0

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	200001f0 	.word	0x200001f0

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff90 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2d 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff42 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff35 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b08b      	sub	sp, #44	; 0x2c
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e169      	b.n	8000eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8158 	bne.w	8000eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a9a      	ldr	r2, [pc, #616]	; (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d05e      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c04:	4a98      	ldr	r2, [pc, #608]	; (8000e68 <HAL_GPIO_Init+0x2a0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d875      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a98      	ldr	r2, [pc, #608]	; (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d058      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c10:	4a96      	ldr	r2, [pc, #600]	; (8000e6c <HAL_GPIO_Init+0x2a4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d86f      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c16:	4a96      	ldr	r2, [pc, #600]	; (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d052      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c1c:	4a94      	ldr	r2, [pc, #592]	; (8000e70 <HAL_GPIO_Init+0x2a8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d869      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c22:	4a94      	ldr	r2, [pc, #592]	; (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d04c      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c28:	4a92      	ldr	r2, [pc, #584]	; (8000e74 <HAL_GPIO_Init+0x2ac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d863      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c2e:	4a92      	ldr	r2, [pc, #584]	; (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d046      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c34:	4a90      	ldr	r2, [pc, #576]	; (8000e78 <HAL_GPIO_Init+0x2b0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d85d      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c3a:	2b12      	cmp	r3, #18
 8000c3c:	d82a      	bhi.n	8000c94 <HAL_GPIO_Init+0xcc>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d859      	bhi.n	8000cf6 <HAL_GPIO_Init+0x12e>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <HAL_GPIO_Init+0x80>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000cc3 	.word	0x08000cc3
 8000c4c:	08000c9d 	.word	0x08000c9d
 8000c50:	08000caf 	.word	0x08000caf
 8000c54:	08000cf1 	.word	0x08000cf1
 8000c58:	08000cf7 	.word	0x08000cf7
 8000c5c:	08000cf7 	.word	0x08000cf7
 8000c60:	08000cf7 	.word	0x08000cf7
 8000c64:	08000cf7 	.word	0x08000cf7
 8000c68:	08000cf7 	.word	0x08000cf7
 8000c6c:	08000cf7 	.word	0x08000cf7
 8000c70:	08000cf7 	.word	0x08000cf7
 8000c74:	08000cf7 	.word	0x08000cf7
 8000c78:	08000cf7 	.word	0x08000cf7
 8000c7c:	08000cf7 	.word	0x08000cf7
 8000c80:	08000cf7 	.word	0x08000cf7
 8000c84:	08000cf7 	.word	0x08000cf7
 8000c88:	08000cf7 	.word	0x08000cf7
 8000c8c:	08000ca5 	.word	0x08000ca5
 8000c90:	08000cb9 	.word	0x08000cb9
 8000c94:	4a79      	ldr	r2, [pc, #484]	; (8000e7c <HAL_GPIO_Init+0x2b4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9a:	e02c      	b.n	8000cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e029      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e024      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e01f      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	e01a      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e013      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	611a      	str	r2, [r3, #16]
          break;
 8000ce2:	e009      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	615a      	str	r2, [r3, #20]
          break;
 8000cee:	e003      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x130>
          break;
 8000cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	; 0xff
 8000cfc:	d801      	bhi.n	8000d02 <HAL_GPIO_Init+0x13a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_Init+0x13e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3304      	adds	r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d802      	bhi.n	8000d14 <HAL_GPIO_Init+0x14c>
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x152>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	3b08      	subs	r3, #8
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	210f      	movs	r1, #15
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	6a39      	ldr	r1, [r7, #32]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d48:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d60:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a40      	ldr	r2, [pc, #256]	; (8000e88 <HAL_GPIO_Init+0x2c0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d013      	beq.n	8000db4 <HAL_GPIO_Init+0x1ec>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3f      	ldr	r2, [pc, #252]	; (8000e8c <HAL_GPIO_Init+0x2c4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d00d      	beq.n	8000db0 <HAL_GPIO_Init+0x1e8>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3e      	ldr	r2, [pc, #248]	; (8000e90 <HAL_GPIO_Init+0x2c8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d007      	beq.n	8000dac <HAL_GPIO_Init+0x1e4>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_GPIO_Init+0x2cc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d101      	bne.n	8000da8 <HAL_GPIO_Init+0x1e0>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e004      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <HAL_GPIO_Init+0x1ee>
 8000db4:	2300      	movs	r3, #0
 8000db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db8:	f002 0203 	and.w	r2, r2, #3
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dc6:	492f      	ldr	r1, [pc, #188]	; (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	492c      	ldr	r1, [pc, #176]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4928      	ldr	r1, [pc, #160]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	4922      	ldr	r1, [pc, #136]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	491e      	ldr	r1, [pc, #120]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	4918      	ldr	r1, [pc, #96]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4914      	ldr	r1, [pc, #80]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d021      	beq.n	8000e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	490e      	ldr	r1, [pc, #56]	; (8000e98 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60cb      	str	r3, [r1, #12]
 8000e64:	e021      	b.n	8000eaa <HAL_GPIO_Init+0x2e2>
 8000e66:	bf00      	nop
 8000e68:	10320000 	.word	0x10320000
 8000e6c:	10310000 	.word	0x10310000
 8000e70:	10220000 	.word	0x10220000
 8000e74:	10210000 	.word	0x10210000
 8000e78:	10120000 	.word	0x10120000
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40011400 	.word	0x40011400
 8000e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4909      	ldr	r1, [pc, #36]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	3301      	adds	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f47f ae8e 	bne.w	8000bdc <HAL_GPIO_Init+0x14>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	372c      	adds	r7, #44	; 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eec:	e003      	b.n	8000ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	041a      	lsls	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e12b      	b.n	800116a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fc0c 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f64:	f002 fcae 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8000f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a81      	ldr	r2, [pc, #516]	; (8001174 <HAL_I2C_Init+0x274>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d807      	bhi.n	8000f84 <HAL_I2C_Init+0x84>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a80      	ldr	r2, [pc, #512]	; (8001178 <HAL_I2C_Init+0x278>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	bf94      	ite	ls
 8000f7c:	2301      	movls	r3, #1
 8000f7e:	2300      	movhi	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e006      	b.n	8000f92 <HAL_I2C_Init+0x92>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a7d      	ldr	r2, [pc, #500]	; (800117c <HAL_I2C_Init+0x27c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	bf94      	ite	ls
 8000f8c:	2301      	movls	r3, #1
 8000f8e:	2300      	movhi	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0e7      	b.n	800116a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4a78      	ldr	r2, [pc, #480]	; (8001180 <HAL_I2C_Init+0x280>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a6a      	ldr	r2, [pc, #424]	; (8001174 <HAL_I2C_Init+0x274>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d802      	bhi.n	8000fd4 <HAL_I2C_Init+0xd4>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	e009      	b.n	8000fe8 <HAL_I2C_Init+0xe8>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a69      	ldr	r2, [pc, #420]	; (8001184 <HAL_I2C_Init+0x284>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	099b      	lsrs	r3, r3, #6
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	495c      	ldr	r1, [pc, #368]	; (8001174 <HAL_I2C_Init+0x274>)
 8001004:	428b      	cmp	r3, r1
 8001006:	d819      	bhi.n	800103c <HAL_I2C_Init+0x13c>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e59      	subs	r1, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fbb1 f3f3 	udiv	r3, r1, r3
 8001016:	1c59      	adds	r1, r3, #1
 8001018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800101c:	400b      	ands	r3, r1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <HAL_I2C_Init+0x138>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1e59      	subs	r1, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001030:	3301      	adds	r3, #1
 8001032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001036:	e051      	b.n	80010dc <HAL_I2C_Init+0x1dc>
 8001038:	2304      	movs	r3, #4
 800103a:	e04f      	b.n	80010dc <HAL_I2C_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d111      	bne.n	8001068 <HAL_I2C_Init+0x168>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1e58      	subs	r0, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	fbb0 f3f3 	udiv	r3, r0, r3
 8001056:	3301      	adds	r3, #1
 8001058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e012      	b.n	800108e <HAL_I2C_Init+0x18e>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1e58      	subs	r0, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	0099      	lsls	r1, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	fbb0 f3f3 	udiv	r3, r0, r3
 800107e:	3301      	adds	r3, #1
 8001080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_Init+0x196>
 8001092:	2301      	movs	r3, #1
 8001094:	e022      	b.n	80010dc <HAL_I2C_Init+0x1dc>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10e      	bne.n	80010bc <HAL_I2C_Init+0x1bc>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1e58      	subs	r0, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6859      	ldr	r1, [r3, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	440b      	add	r3, r1
 80010ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b0:	3301      	adds	r3, #1
 80010b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ba:	e00f      	b.n	80010dc <HAL_I2C_Init+0x1dc>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1e58      	subs	r0, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	0099      	lsls	r1, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	6809      	ldr	r1, [r1, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800110a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6911      	ldr	r1, [r2, #16]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68d2      	ldr	r2, [r2, #12]
 8001116:	4311      	orrs	r1, r2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	430b      	orrs	r3, r1
 800111e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2220      	movs	r2, #32
 8001156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	000186a0 	.word	0x000186a0
 8001178:	001e847f 	.word	0x001e847f
 800117c:	003d08ff 	.word	0x003d08ff
 8001180:	431bde83 	.word	0x431bde83
 8001184:	10624dd3 	.word	0x10624dd3

08001188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	461a      	mov	r2, r3
 8001194:	460b      	mov	r3, r1
 8001196:	817b      	strh	r3, [r7, #10]
 8001198:	4613      	mov	r3, r2
 800119a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fbd8 	bl	8000950 <HAL_GetTick>
 80011a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	f040 80e0 	bne.w	8001370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2319      	movs	r3, #25
 80011b6:	2201      	movs	r2, #1
 80011b8:	4970      	ldr	r1, [pc, #448]	; (800137c <HAL_I2C_Master_Transmit+0x1f4>)
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f964 	bl	8001488 <I2C_WaitOnFlagUntilTimeout>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011c6:	2302      	movs	r3, #2
 80011c8:	e0d3      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_I2C_Master_Transmit+0x50>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e0cc      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d007      	beq.n	80011fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0201 	orr.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800120c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2221      	movs	r2, #33	; 0x21
 8001212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2210      	movs	r2, #16
 800121a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	893a      	ldrh	r2, [r7, #8]
 800122e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_I2C_Master_Transmit+0x1f8>)
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001240:	8979      	ldrh	r1, [r7, #10]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f89c 	bl	8001384 <I2C_MasterRequestWrite>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e08d      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800126c:	e066      	b.n	800133c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	6a39      	ldr	r1, [r7, #32]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f9de 	bl	8001634 <I2C_WaitOnTXEFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00d      	beq.n	800129a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b04      	cmp	r3, #4
 8001284:	d107      	bne.n	8001296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06b      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d11b      	bne.n	8001310 <HAL_I2C_Master_Transmit+0x188>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d017      	beq.n	8001310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	6a39      	ldr	r1, [r7, #32]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f9ce 	bl	80016b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00d      	beq.n	800133c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2b04      	cmp	r3, #4
 8001326:	d107      	bne.n	8001338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e01a      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001340:	2b00      	cmp	r3, #0
 8001342:	d194      	bne.n	800126e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2220      	movs	r2, #32
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001370:	2302      	movs	r3, #2
  }
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	00100002 	.word	0x00100002
 8001380:	ffff0000 	.word	0xffff0000

08001384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af02      	add	r7, sp, #8
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	460b      	mov	r3, r1
 8001392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d006      	beq.n	80013ae <I2C_MasterRequestWrite+0x2a>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <I2C_MasterRequestWrite+0x2a>
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013ac:	d108      	bne.n	80013c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d107      	bne.n	80013d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f84f 	bl	8001488 <I2C_WaitOnFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00d      	beq.n	800140c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013fe:	d103      	bne.n	8001408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e035      	b.n	8001478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001414:	d108      	bne.n	8001428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001416:	897b      	ldrh	r3, [r7, #10]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	e01b      	b.n	8001460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001428:	897b      	ldrh	r3, [r7, #10]
 800142a:	11db      	asrs	r3, r3, #7
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0306 	and.w	r3, r3, #6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f063 030f 	orn	r3, r3, #15
 8001438:	b2da      	uxtb	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <I2C_MasterRequestWrite+0xfc>)
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f875 	bl	8001536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e010      	b.n	8001478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <I2C_MasterRequestWrite+0x100>)
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f865 	bl	8001536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	00010008 	.word	0x00010008
 8001484:	00010002 	.word	0x00010002

08001488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001498:	e025      	b.n	80014e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d021      	beq.n	80014e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a2:	f7ff fa55 	bl	8000950 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d302      	bcc.n	80014b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d116      	bne.n	80014e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e023      	b.n	800152e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10d      	bne.n	800150c <I2C_WaitOnFlagUntilTimeout+0x84>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4013      	ands	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	e00c      	b.n	8001526 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4013      	ands	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	429a      	cmp	r2, r3
 800152a:	d0b6      	beq.n	800149a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001544:	e051      	b.n	80015ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001554:	d123      	bne.n	800159e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001564:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800156e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e046      	b.n	800162c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d021      	beq.n	80015ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a6:	f7ff f9d3 	bl	8000950 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d302      	bcc.n	80015bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d116      	bne.n	80015ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e020      	b.n	800162c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4013      	ands	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e00b      	b.n	8001626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	43da      	mvns	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4013      	ands	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d18d      	bne.n	8001546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001640:	e02d      	b.n	800169e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f878 	bl	8001738 <I2C_IsAcknowledgeFailed>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e02d      	b.n	80016ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d021      	beq.n	800169e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff f979 	bl	8000950 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d116      	bne.n	800169e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f043 0220 	orr.w	r2, r3, #32
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e007      	b.n	80016ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b80      	cmp	r3, #128	; 0x80
 80016aa:	d1ca      	bne.n	8001642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016c2:	e02d      	b.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f837 	bl	8001738 <I2C_IsAcknowledgeFailed>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e02d      	b.n	8001730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016da:	d021      	beq.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016dc:	f7ff f938 	bl	8000950 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d302      	bcc.n	80016f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e007      	b.n	8001730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b04      	cmp	r3, #4
 800172c:	d1ca      	bne.n	80016c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	d11b      	bne.n	8001788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	b08b      	sub	sp, #44	; 0x2c
 8001798:	af06      	add	r7, sp, #24
 800179a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0fd      	b.n	80019a2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f006 fc42 	bl	8008044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 f987 	bl	8003ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	687e      	ldr	r6, [r7, #4]
 80017da:	466d      	mov	r5, sp
 80017dc:	f106 0410 	add.w	r4, r6, #16
 80017e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	602b      	str	r3, [r5, #0]
 80017e8:	1d33      	adds	r3, r6, #4
 80017ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f002 f951 	bl	8003a94 <USB_CoreInit>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0ce      	b.n	80019a2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f002 f982 	bl	8003b14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e04c      	b.n	80018b0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3301      	adds	r3, #1
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	b298      	uxth	r0, r3
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3336      	adds	r3, #54	; 0x36
 8001854:	4602      	mov	r2, r0
 8001856:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3303      	adds	r3, #3
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3338      	adds	r3, #56	; 0x38
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	333c      	adds	r3, #60	; 0x3c
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3340      	adds	r3, #64	; 0x40
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	3301      	adds	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3ad      	bcc.n	8001816 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e044      	b.n	800194a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	3301      	adds	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3b5      	bcc.n	80018c0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	687e      	ldr	r6, [r7, #4]
 800195c:	466d      	mov	r5, sp
 800195e:	f106 0410 	add.w	r4, r6, #16
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	1d33      	adds	r3, r6, #4
 800196c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196e:	6838      	ldr	r0, [r7, #0]
 8001970:	f002 f8dc 	bl	8003b2c <USB_DevInit>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00d      	b.n	80019a2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f004 fd8e 	bl	80064bc <USB_DevDisconnect>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_PCD_Start+0x16>
 80019bc:	2302      	movs	r3, #2
 80019be:	e016      	b.n	80019ee <HAL_PCD_Start+0x44>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 f871 	bl	8003ab4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019d2:	2101      	movs	r1, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f006 fda8 	bl	800852a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 fd62 	bl	80064a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b088      	sub	sp, #32
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fd64 	bl	80064d0 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a12:	d102      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb5f 	bl	80020d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fd56 	bl	80064d0 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2e:	d112      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f006 fb76 	bl	800813a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f923 	bl	8001c9c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fd38 	bl	80064d0 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6a:	d10b      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a7e:	b292      	uxth	r2, r2
 8001a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 fd21 	bl	80064d0 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a98:	d10b      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aac:	b292      	uxth	r2, r2
 8001aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fd0a 	bl	80064d0 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac6:	d126      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	b292      	uxth	r2, r2
 8001adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0208 	bic.w	r2, r2, #8
 8001af2:	b292      	uxth	r2, r2
 8001af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f006 fb57 	bl	80081ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b10:	b292      	uxth	r2, r2
 8001b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fcd8 	bl	80064d0 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2a:	f040 8082 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	77fb      	strb	r3, [r7, #31]
 8001b32:	e010      	b.n	8001b56 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	441a      	add	r2, r3
 8001b40:	7ffb      	ldrb	r3, [r7, #31]
 8001b42:	8812      	ldrh	r2, [r2, #0]
 8001b44:	b292      	uxth	r2, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	3320      	adds	r3, #32
 8001b4a:	443b      	add	r3, r7
 8001b4c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	3301      	adds	r3, #1
 8001b54:	77fb      	strb	r3, [r7, #31]
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	d9eb      	bls.n	8001b34 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	b292      	uxth	r2, r2
 8001b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b8c:	bf00      	nop
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f6      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	77fb      	strb	r3, [r7, #31]
 8001bbc:	e00f      	b.n	8001bde <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	7ffa      	ldrb	r2, [r7, #31]
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	440a      	add	r2, r1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	3320      	adds	r3, #32
 8001bd0:	443b      	add	r3, r7
 8001bd2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bd6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	77fb      	strb	r3, [r7, #31]
 8001bde:	7ffb      	ldrb	r3, [r7, #31]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9ec      	bls.n	8001bbe <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0204 	orr.w	r2, r2, #4
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f006 faa3 	bl	8008178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fc4a 	bl	80064d0 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c46:	d10e      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f006 fa5c 	bl	800811e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fc30 	bl	80064d0 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7a:	d10b      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_SetAddress+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_PCD_SetAddress+0x42>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fbd7 	bl	8006482 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	70fb      	strb	r3, [r7, #3]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	803b      	strh	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0e      	bge.n	8001d2a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	705a      	strb	r2, [r3, #1]
 8001d28:	e00e      	b.n	8001d48 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 0207 	and.w	r2, r3, #7
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d54:	883a      	ldrh	r2, [r7, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	78ba      	ldrb	r2, [r7, #2]
 8001d5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d102      	bne.n	8001d7e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Open+0xa6>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Open+0xc4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fee6 	bl	8003b6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da0e      	bge.n	8001de4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	705a      	strb	r2, [r3, #1]
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_PCD_EP_Close+0x6a>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00e      	b.n	8001e3a <HAL_PCD_EP_Close+0x88>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fa08 	bl	8004240 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	f003 0207 	and.w	r2, r3, #7
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fbba 	bl	8004618 <USB_EPStartXfer>
 8001ea4:	e005      	b.n	8001eb2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6979      	ldr	r1, [r7, #20]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fbb3 	bl	8004618 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 0207 	and.w	r2, r3, #7
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2201      	movs	r2, #1
 8001f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f36:	7afb      	ldrb	r3, [r7, #11]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6979      	ldr	r1, [r7, #20]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fb60 	bl	8004618 <USB_EPStartXfer>
 8001f58:	e005      	b.n	8001f66 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fb59 	bl	8004618 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 0207 	and.w	r2, r3, #7
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d901      	bls.n	8001f8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e04c      	b.n	8002028 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0e      	bge.n	8001fb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00c      	b.n	8001fce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_SetStall+0x7e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e01c      	b.n	8002028 <HAL_PCD_EP_SetStall+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f943 	bl	8006288 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f004 fa68 	bl	80064ee <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e040      	b.n	80020d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0e      	bge.n	8002074 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00e      	b.n	8002092 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0207 	and.w	r2, r3, #7
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_EP_ClrStall+0x82>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e00e      	b.n	80020d0 <HAL_PCD_EP_ClrStall+0xa0>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 f931 	bl	8006328 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020e0:	e2ec      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8161 	bne.w	80023c4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d152      	bne.n	80021b2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212c:	b29b      	uxth	r3, r3
 800212e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3328      	adds	r3, #40	; 0x28
 8002134:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	441a      	add	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002170:	2100      	movs	r1, #0
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f005 ffb9 	bl	80080ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 829b 	beq.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8296 	bne.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800219c:	b2da      	uxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b292      	uxth	r2, r2
 80021a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021b0:	e284      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d034      	beq.n	8002236 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	3306      	adds	r3, #6
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800220a:	b29b      	uxth	r3, r3
 800220c:	f004 f9bf 	bl	800658e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29a      	uxth	r2, r3
 8002218:	f640 738f 	movw	r3, #3983	; 0xf8f
 800221c:	4013      	ands	r3, r2
 800221e:	823b      	strh	r3, [r7, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	8a3a      	ldrh	r2, [r7, #16]
 8002226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f005 ff2e 	bl	8008090 <HAL_PCD_SetupStageCallback>
 8002234:	e242      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002236:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800223a:	2b00      	cmp	r3, #0
 800223c:	f280 823e 	bge.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800224c:	4013      	ands	r3, r2
 800224e:	83bb      	strh	r3, [r7, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	8bba      	ldrh	r2, [r7, #28]
 8002256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225a:	b292      	uxth	r2, r2
 800225c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3306      	adds	r3, #6
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x1ee>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	6959      	ldr	r1, [r3, #20]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f004 f96f 	bl	800658e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f005 fef7 	bl	80080b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 81f2 	bne.w	80026bc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d112      	bne.n	8002326 <PCD_EP_ISR_Handler+0x24e>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800230a:	b29a      	uxth	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231e:	b29a      	uxth	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e02f      	b.n	8002386 <PCD_EP_ISR_Handler+0x2ae>
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b3e      	cmp	r3, #62	; 0x3e
 800232c:	d813      	bhi.n	8002356 <PCD_EP_ISR_Handler+0x27e>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <PCD_EP_ISR_Handler+0x270>
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	3301      	adds	r3, #1
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	b29b      	uxth	r3, r3
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e017      	b.n	8002386 <PCD_EP_ISR_Handler+0x2ae>
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <PCD_EP_ISR_Handler+0x298>
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	3b01      	subs	r3, #1
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	b29b      	uxth	r3, r3
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	b29b      	uxth	r3, r3
 8002378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002380:	b29a      	uxth	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	827b      	strh	r3, [r7, #18]
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800239e:	827b      	strh	r3, [r7, #18]
 80023a0:	8a7b      	ldrh	r3, [r7, #18]
 80023a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a6:	827b      	strh	r3, [r7, #18]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	8a7b      	ldrh	r3, [r7, #18]
 80023ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8013      	strh	r3, [r2, #0]
 80023c2:	e17b      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f280 80ea 	bge.w	80025b4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f6:	4013      	ands	r3, r2
 80023f8:	853b      	strh	r3, [r7, #40]	; 0x28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800240a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240e:	b292      	uxth	r2, r2
 8002410:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002412:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	7b1b      	ldrb	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d122      	bne.n	8002476 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	3306      	adds	r3, #6
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002458:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800245a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8087 	beq.w	8002570 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	88da      	ldrh	r2, [r3, #6]
 800246e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002470:	f004 f88d 	bl	800658e <USB_ReadPMA>
 8002474:	e07c      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d108      	bne.n	8002490 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800247e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002480:	461a      	mov	r2, r3
 8002482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f927 	bl	80026d8 <HAL_PCD_EP_DB_Receive>
 800248a:	4603      	mov	r3, r0
 800248c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800248e:	e06f      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d021      	beq.n	800252e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	3302      	adds	r3, #2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002512:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02a      	beq.n	8002570 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	891a      	ldrh	r2, [r3, #8]
 8002526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002528:	f004 f831 	bl	800658e <USB_ReadPMA>
 800252c:	e020      	b.n	8002570 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	3306      	adds	r3, #6
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002556:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6959      	ldr	r1, [r3, #20]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	895a      	ldrh	r2, [r3, #10]
 800256a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256c:	f004 f80f 	bl	800658e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002576:	441a      	add	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002582:	441a      	add	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <PCD_EP_ISR_Handler+0x4c2>
 8002590:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d206      	bcs.n	80025a8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f005 fd87 	bl	80080b4 <HAL_PCD_DataOutStageCallback>
 80025a6:	e005      	b.n	80025b4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f832 	bl	8004618 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d07e      	beq.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ec:	843b      	strh	r3, [r7, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	8c3b      	ldrh	r3, [r7, #32]
 80025fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d00c      	beq.n	800262c <PCD_EP_ISR_Handler+0x554>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	78db      	ldrb	r3, [r3, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800261e:	2b02      	cmp	r3, #2
 8002620:	d146      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002622:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d141      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	3302      	adds	r3, #2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002654:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	8bfb      	ldrh	r3, [r7, #30]
 800265c:	429a      	cmp	r2, r3
 800265e:	d906      	bls.n	800266e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	8bfb      	ldrh	r3, [r7, #30]
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	e002      	b.n	8002674 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 fd31 	bl	80080ea <HAL_PCD_DataInStageCallback>
 8002688:	e018      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	8bfb      	ldrh	r3, [r7, #30]
 8002690:	441a      	add	r2, r3
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	8bfb      	ldrh	r3, [r7, #30]
 800269c:	441a      	add	r2, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 ffb5 	bl	8004618 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026ae:	e005      	b.n	80026bc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f91b 	bl	80028f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f6ff ad0a 	blt.w	80020e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3738      	adds	r7, #56	; 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07e      	beq.n	80027ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3302      	adds	r3, #2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	429a      	cmp	r2, r3
 8002722:	d306      	bcc.n	8002732 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	e002      	b.n	8002738 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d123      	bne.n	8002788 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	833b      	strh	r3, [r7, #24]
 800275c:	8b3b      	ldrh	r3, [r7, #24]
 800275e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002762:	833b      	strh	r3, [r7, #24]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	8b3b      	ldrh	r3, [r7, #24]
 8002774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01f      	beq.n	80027d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	82fb      	strh	r3, [r7, #22]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027d2:	8b7b      	ldrh	r3, [r7, #26]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8087 	beq.w	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6959      	ldr	r1, [r3, #20]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	891a      	ldrh	r2, [r3, #8]
 80027e6:	8b7b      	ldrh	r3, [r7, #26]
 80027e8:	f003 fed1 	bl	800658e <USB_ReadPMA>
 80027ec:	e07c      	b.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	3306      	adds	r3, #6
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	429a      	cmp	r2, r3
 8002820:	d306      	bcc.n	8002830 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	8b7b      	ldrh	r3, [r7, #26]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e002      	b.n	8002836 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002860:	83fb      	strh	r3, [r7, #30]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11f      	bne.n	80028d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	83bb      	strh	r3, [r7, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d0:	8b7b      	ldrh	r3, [r7, #26]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6959      	ldr	r1, [r3, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	895a      	ldrh	r2, [r3, #10]
 80028e2:	8b7b      	ldrh	r3, [r7, #26]
 80028e4:	f003 fe53 	bl	800658e <USB_ReadPMA>
    }
  }

  return count;
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b0a2      	sub	sp, #136	; 0x88
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81c7 	beq.w	8002c9a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	3302      	adds	r3, #2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	429a      	cmp	r2, r3
 8002942:	d907      	bls.n	8002954 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e002      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80b9 	bne.w	8002ad6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d126      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	4413      	add	r3, r2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	4413      	add	r3, r2
 800298e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e01a      	b.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d116      	bne.n	80029f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	4413      	add	r3, r2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2200      	movs	r2, #0
 80029ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d126      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x15a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	011a      	lsls	r2, r3, #4
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e017      	b.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d113      	bne.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	4413      	add	r3, r2
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	011a      	lsls	r2, r3, #4
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f005 fb31 	bl	80080ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 82d4 	beq.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	827b      	strh	r3, [r7, #18]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8013      	strh	r3, [r2, #0]
 8002ad4:	e2b2      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 8286 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b38:	441a      	add	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b46:	441a      	add	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d309      	bcc.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	e015      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b82:	e009      	b.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d155      	bne.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	4413      	add	r3, r2
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011a      	lsls	r2, r3, #4
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e047      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8002bf8:	d811      	bhi.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e032      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	3b01      	subs	r3, #1
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e01b      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d117      	bne.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	4413      	add	r3, r2
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6959      	ldr	r1, [r3, #20]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	891a      	ldrh	r2, [r3, #8]
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f003 fc36 	bl	8006504 <USB_WritePMA>
 8002c98:	e1d0      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	3306      	adds	r3, #6
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d307      	bcc.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	e002      	b.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 80c4 	bne.w	8002e7a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d126      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x456>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	4413      	add	r3, r2
 8002d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	011a      	lsls	r2, r3, #4
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e01a      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d116      	bne.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	677b      	str	r3, [r7, #116]	; 0x74
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	4413      	add	r3, r2
 8002d66:	677b      	str	r3, [r7, #116]	; 0x74
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	011a      	lsls	r2, r3, #4
 8002d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d70:	4413      	add	r3, r2
 8002d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d76:	673b      	str	r3, [r7, #112]	; 0x70
 8002d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12f      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da4:	4413      	add	r3, r2
 8002da6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011a      	lsls	r2, r3, #4
 8002db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e017      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d113      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	4413      	add	r3, r2
 8002e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	011a      	lsls	r2, r3, #4
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0e:	4413      	add	r3, r2
 8002e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f005 f961 	bl	80080ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8104 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
 8002e78:	e0e0      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d121      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80b4 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002edc:	441a      	add	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eea:	441a      	add	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d309      	bcc.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f08:	1ad2      	subs	r2, r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	e015      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f26:	e009      	b.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	667b      	str	r3, [r7, #100]	; 0x64
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d155      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x704>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5e:	4413      	add	r3, r2
 8002f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	011a      	lsls	r2, r3, #4
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f70:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e044      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa2:	d811      	bhi.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8002faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	e02f      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8002fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e018      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d114      	bne.n	8003028 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300c:	4413      	add	r3, r2
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	011a      	lsls	r2, r3, #4
 8003016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003018:	4413      	add	r3, r2
 800301a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800301e:	663b      	str	r3, [r7, #96]	; 0x60
 8003020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003022:	b29a      	uxth	r2, r3
 8003024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003026:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6959      	ldr	r1, [r3, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	895a      	ldrh	r2, [r3, #10]
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	f003 fa64 	bl	8006504 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003056:	823b      	strh	r3, [r7, #16]
 8003058:	8a3b      	ldrh	r3, [r7, #16]
 800305a:	f083 0310 	eor.w	r3, r3, #16
 800305e:	823b      	strh	r3, [r7, #16]
 8003060:	8a3b      	ldrh	r3, [r7, #16]
 8003062:	f083 0320 	eor.w	r3, r3, #32
 8003066:	823b      	strh	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	8a3b      	ldrh	r3, [r7, #16]
 8003078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	b29b      	uxth	r3, r3
 800308a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3788      	adds	r7, #136	; 0x88
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
 80030a4:	4613      	mov	r3, r2
 80030a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e009      	b.n	80030e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030cc:	897a      	ldrh	r2, [r7, #10]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	80da      	strh	r2, [r3, #6]
 80030f4:	e00b      	b.n	800310e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2201      	movs	r2, #1
 80030fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b29a      	uxth	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e272      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8087 	beq.w	800324a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00c      	beq.n	8003162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003148:	4b8f      	ldr	r3, [pc, #572]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0x5e>
 8003154:	4b8c      	ldr	r3, [pc, #560]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d10b      	bne.n	800317a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003162:	4b89      	ldr	r3, [pc, #548]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d06c      	beq.n	8003248 <HAL_RCC_OscConfig+0x12c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d168      	bne.n	8003248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e24c      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x76>
 8003184:	4b80      	ldr	r3, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7f      	ldr	r2, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e02e      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7a      	ldr	r2, [pc, #488]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b78      	ldr	r3, [pc, #480]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a77      	ldr	r2, [pc, #476]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0xbc>
 80031be:	4b72      	ldr	r3, [pc, #456]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a71      	ldr	r2, [pc, #452]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xd4>
 80031d8:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a67      	ldr	r2, [pc, #412]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fbaa 	bl	8000950 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fba6 	bl	8000950 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e200      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xe4>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd fb96 	bl	8000950 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fd fb92 	bl	8000950 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1ec      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x10c>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x18c>
 800326e:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x176>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1c0      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4939      	ldr	r1, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fd fb4b 	bl	8000950 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fb47 	bl	8000950 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1a1      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4927      	ldr	r1, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fb2a 	bl	8000950 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003300:	f7fd fb26 	bl	8000950 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e180      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03a      	beq.n	80033a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_RCC_OscConfig+0x274>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fd fb0a 	bl	8000950 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fb06 	bl	8000950 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e160      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_OscConfig+0x26c>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800335e:	2001      	movs	r0, #1
 8003360:	f000 fac4 	bl	80038ec <RCC_Delay>
 8003364:	e01c      	b.n	80033a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x274>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7fd faf0 	bl	8000950 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003372:	e00f      	b.n	8003394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fd faec 	bl	8000950 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d908      	bls.n	8003394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e146      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	42420000 	.word	0x42420000
 8003390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e9      	bne.n	8003374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a6 	beq.w	80034fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b8b      	ldr	r3, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a87      	ldr	r2, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b85      	ldr	r3, [pc, #532]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b82      	ldr	r3, [pc, #520]	; (80035e4 <HAL_RCC_OscConfig+0x4c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b7f      	ldr	r3, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0x4c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7e      	ldr	r2, [pc, #504]	; (80035e4 <HAL_RCC_OscConfig+0x4c8>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fd faad 	bl	8000950 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fd faa9 	bl	8000950 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b64      	cmp	r3, #100	; 0x64
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e103      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b75      	ldr	r3, [pc, #468]	; (80035e4 <HAL_RCC_OscConfig+0x4c8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x312>
 8003420:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e02d      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x334>
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6213      	str	r3, [r2, #32]
 800344e:	e01c      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_OscConfig+0x356>
 8003458:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a60      	ldr	r2, [pc, #384]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	4b5e      	ldr	r3, [pc, #376]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a5d      	ldr	r2, [pc, #372]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	e00b      	b.n	800348a <HAL_RCC_OscConfig+0x36e>
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6213      	str	r3, [r2, #32]
 800347e:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d015      	beq.n	80034be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fd fa5d 	bl	8000950 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd fa59 	bl	8000950 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0b1      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <HAL_RCC_OscConfig+0x37e>
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7fd fa47 	bl	8000950 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fd fa43 	bl	8000950 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e09b      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8087 	beq.w	8003612 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d061      	beq.n	80035d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d146      	bne.n	80035a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x4cc>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fd fa17 	bl	8000950 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd fa13 	bl	8000950 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e06d      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d108      	bne.n	8003560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4921      	ldr	r1, [pc, #132]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a19      	ldr	r1, [r3, #32]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	430b      	orrs	r3, r1
 8003572:	491b      	ldr	r1, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fd f9e7 	bl	8000950 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fd f9e3 	bl	8000950 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x46a>
 80035a4:	e035      	b.n	8003612 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fd f9d0 	bl	8000950 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd f9cc 	bl	8000950 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e026      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x498>
 80035d2:	e01e      	b.n	8003612 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e019      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
 80035e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_OscConfig+0x500>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000

08003620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0d0      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d910      	bls.n	8003664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	4965      	ldr	r1, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800369e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d040      	beq.n	8003740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d115      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e073      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06b      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4936      	ldr	r1, [pc, #216]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003710:	f7fd f91e 	bl	8000950 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd f91a 	bl	8000950 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e053      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d210      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 0207 	bic.w	r2, r3, #7
 8003756:	4922      	ldr	r1, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1cc>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1d0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd f87c 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	0800869c 	.word	0x0800869c
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	b490      	push	{r4, r7}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80037fc:	1d3c      	adds	r4, r7, #4
 80037fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003804:	f240 2301 	movw	r3, #513	; 0x201
 8003808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800381e:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 800382e:	2b08      	cmp	r3, #8
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x46>
 8003832:	e02b      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003836:	623b      	str	r3, [r7, #32]
      break;
 8003838:	e02b      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	0c9b      	lsrs	r3, r3, #18
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3328      	adds	r3, #40	; 0x28
 8003844:	443b      	add	r3, r7
 8003846:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800384a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0c5b      	lsrs	r3, r3, #17
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	3328      	adds	r3, #40	; 0x28
 8003862:	443b      	add	r3, r7
 8003864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800386e:	fb03 f202 	mul.w	r2, r3, r2
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	e004      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	623b      	str	r3, [r7, #32]
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800388e:	623b      	str	r3, [r7, #32]
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	6a3b      	ldr	r3, [r7, #32]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	; 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bc90      	pop	{r4, r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	08008650 	.word	0x08008650
 80038a4:	40021000 	.word	0x40021000
 80038a8:	007a1200 	.word	0x007a1200
 80038ac:	003d0900 	.word	0x003d0900

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	20000000 	.word	0x20000000

080038c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038c8:	f7ff fff2 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080086ac 	.word	0x080086ac

080038ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCC_Delay+0x34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <RCC_Delay+0x38>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003908:	bf00      	nop
  }
  while (Delay --);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <RCC_Delay+0x1c>
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000000 	.word	0x20000000
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d07d      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4a4b      	ldr	r2, [pc, #300]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	61d3      	str	r3, [r2, #28]
 8003960:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d118      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397c:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003988:	f7fc ffe2 	bl	8000950 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fc ffde 	bl	8000950 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e06d      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d02e      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d027      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d6:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d014      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fc ffad 	bl	8000950 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fc ffa9 	bl	8000950 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e036      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ee      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4917      	ldr	r1, [pc, #92]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	490b      	ldr	r1, [pc, #44]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	42420440 	.word	0x42420440

08003a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	f107 0014 	add.w	r0, r7, #20
 8003aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	b004      	add	sp, #16
 8003ab2:	4770      	bx	lr

08003ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ac4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	f107 0014 	add.w	r0, r7, #20
 8003b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr

08003b6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b09b      	sub	sp, #108	; 0x6c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d81f      	bhi.n	8003bde <USB_ActivateEndpoint+0x72>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <USB_ActivateEndpoint+0x38>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003be7 	.word	0x08003be7
 8003bb0:	08003bc3 	.word	0x08003bc3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bc0:	e012      	b.n	8003be8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bc6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bce:	e00b      	b.n	8003be8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bdc:	e004      	b.n	8003be8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003be4:	e000      	b.n	8003be8 <USB_ActivateEndpoint+0x7c>
      break;
 8003be6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	7b1b      	ldrb	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 8149 	bne.w	8003eec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8084 	beq.w	8003d6c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	88db      	ldrh	r3, [r3, #6]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	81fb      	strh	r3, [r7, #14]
 8003ca6:	89fb      	ldrh	r3, [r7, #14]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <USB_ActivateEndpoint+0x17c>
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	81bb      	strh	r3, [r7, #12]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	89bb      	ldrh	r3, [r7, #12]
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d020      	beq.n	8003d32 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d06:	813b      	strh	r3, [r7, #8]
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	f083 0320 	eor.w	r3, r3, #32
 8003d0e:	813b      	strh	r3, [r7, #8]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
 8003d30:	e27f      	b.n	8004232 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	897b      	ldrh	r3, [r7, #10]
 8003d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]
 8003d6a:	e262      	b.n	8004232 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	4413      	add	r3, r2
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	011a      	lsls	r2, r3, #4
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	88db      	ldrh	r3, [r3, #6]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	4413      	add	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	011a      	lsls	r2, r3, #4
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d112      	bne.n	8003df2 <USB_ActivateEndpoint+0x286>
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	e02f      	b.n	8003e52 <USB_ActivateEndpoint+0x2e6>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b3e      	cmp	r3, #62	; 0x3e
 8003df8:	d813      	bhi.n	8003e22 <USB_ActivateEndpoint+0x2b6>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <USB_ActivateEndpoint+0x2a8>
 8003e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e10:	3301      	adds	r3, #1
 8003e12:	663b      	str	r3, [r7, #96]	; 0x60
 8003e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e017      	b.n	8003e52 <USB_ActivateEndpoint+0x2e6>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <USB_ActivateEndpoint+0x2d0>
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	83fb      	strh	r3, [r7, #30]
 8003e60:	8bfb      	ldrh	r3, [r7, #30]
 8003e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01b      	beq.n	8003ea2 <USB_ActivateEndpoint+0x336>
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e80:	83bb      	strh	r3, [r7, #28]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	8bbb      	ldrh	r3, [r7, #28]
 8003e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	837b      	strh	r3, [r7, #26]
 8003eba:	8b7b      	ldrh	r3, [r7, #26]
 8003ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ec0:	837b      	strh	r3, [r7, #26]
 8003ec2:	8b7b      	ldrh	r3, [r7, #26]
 8003ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ec8:	837b      	strh	r3, [r7, #26]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	441a      	add	r2, r3
 8003ed4:	8b7b      	ldrh	r3, [r7, #26]
 8003ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	8013      	strh	r3, [r2, #0]
 8003eea:	e1a2      	b.n	8004232 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	441a      	add	r2, r3
 8003f10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f38:	4413      	add	r3, r2
 8003f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	891b      	ldrh	r3, [r3, #8]
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6c:	4413      	add	r3, r2
 8003f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	895b      	ldrh	r3, [r3, #10]
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8091 	bne.w	80040bc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01b      	beq.n	8003fea <USB_ActivateEndpoint+0x47e>
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	873b      	strh	r3, [r7, #56]	; 0x38
 8003ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <USB_ActivateEndpoint+0x4ce>
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	86fb      	strh	r3, [r7, #54]	; 0x36
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004052:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004058:	86bb      	strh	r3, [r7, #52]	; 0x34
 800405a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800405c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004060:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004098:	867b      	strh	r3, [r7, #50]	; 0x32
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
 80040ba:	e0ba      	b.n	8004232 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01d      	beq.n	8004114 <USB_ActivateEndpoint+0x5a8>
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01d      	beq.n	800416c <USB_ActivateEndpoint+0x600>
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d024      	beq.n	80041be <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800418e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004192:	f083 0320 	eor.w	r3, r3, #32
 8004196:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]
 80041bc:	e01d      	b.n	80041fa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004210:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004236:	4618      	mov	r0, r3
 8004238:	376c      	adds	r7, #108	; 0x6c
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004240:	b480      	push	{r7}
 8004242:	b08d      	sub	sp, #52	; 0x34
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	7b1b      	ldrb	r3, [r3, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 808e 	bne.w	8004370 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d044      	beq.n	80042e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	81bb      	strh	r3, [r7, #12]
 800426a:	89bb      	ldrh	r3, [r7, #12]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <USB_DeactivateEndpoint+0x6c>
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	817b      	strh	r3, [r7, #10]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	813b      	strh	r3, [r7, #8]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]
 80042e4:	e192      	b.n	800460c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	827b      	strh	r3, [r7, #18]
 80042f4:	8a7b      	ldrh	r3, [r7, #18]
 80042f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <USB_DeactivateEndpoint+0xf6>
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004314:	823b      	strh	r3, [r7, #16]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	8a3b      	ldrh	r3, [r7, #16]
 8004322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004332:	b29b      	uxth	r3, r3
 8004334:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	81fb      	strh	r3, [r7, #14]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	b29b      	uxth	r3, r3
 800436c:	8013      	strh	r3, [r2, #0]
 800436e:	e14d      	b.n	800460c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 80a5 	bne.w	80044c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	843b      	strh	r3, [r7, #32]
 8004388:	8c3b      	ldrh	r3, [r7, #32]
 800438a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01b      	beq.n	80043ca <USB_DeactivateEndpoint+0x18a>
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a8:	83fb      	strh	r3, [r7, #30]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	441a      	add	r2, r3
 80043b4:	8bfb      	ldrh	r3, [r7, #30]
 80043b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	83bb      	strh	r3, [r7, #28]
 80043d8:	8bbb      	ldrh	r3, [r7, #28]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01b      	beq.n	800441a <USB_DeactivateEndpoint+0x1da>
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	837b      	strh	r3, [r7, #26]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	8b7b      	ldrh	r3, [r7, #26]
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	833b      	strh	r3, [r7, #24]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8b3b      	ldrh	r3, [r7, #24]
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	82fb      	strh	r3, [r7, #22]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	8afb      	ldrh	r3, [r7, #22]
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a0:	82bb      	strh	r3, [r7, #20]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	8abb      	ldrh	r3, [r7, #20]
 80044ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]
 80044c2:	e0a3      	b.n	800460c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <USB_DeactivateEndpoint+0x2d4>
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	441a      	add	r2, r3
 80044fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004510:	b29b      	uxth	r3, r3
 8004512:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004522:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <USB_DeactivateEndpoint+0x324>
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	853b      	strh	r3, [r7, #40]	; 0x28
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3734      	adds	r7, #52	; 0x34
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0cc      	sub	sp, #304	; 0x130
 800461c:	af00      	add	r7, sp, #0
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004626:	6018      	str	r0, [r3, #0]
 8004628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800462c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004630:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f041 817d 	bne.w	800593e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	429a      	cmp	r2, r3
 800465e:	d908      	bls.n	8004672 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004670:	e007      	b.n	8004682 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	7b1b      	ldrb	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d152      	bne.n	8004738 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6959      	ldr	r1, [r3, #20]
 800469e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	88da      	ldrh	r2, [r3, #6]
 80046aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046b8:	6800      	ldr	r0, [r0, #0]
 80046ba:	f001 ff23 	bl	8006504 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046ca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4619      	mov	r1, r3
 80046e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	440a      	add	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	011a      	lsls	r2, r3, #4
 8004708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4413      	add	r3, r2
 8004714:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004726:	b29a      	uxth	r2, r3
 8004728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	f001 b8b5 	b.w	80058a2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b02      	cmp	r3, #2
 8004746:	f040 84c6 	bne.w	80050d6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800474a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	f240 8443 	bls.w	8004fee <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 823e 	beq.w	8004c86 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800480a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004812:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004816:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 809a 	bne.w	8004964 <USB_EPStartXfer+0x34c>
 8004830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004838:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800483c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004852:	b29b      	uxth	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004862:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	440a      	add	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4413      	add	r3, r2
 8004886:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800488a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d122      	bne.n	80048e2 <USB_EPStartXfer+0x2ca>
 800489c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e079      	b.n	80049d6 <USB_EPStartXfer+0x3be>
 80048e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e6:	2b3e      	cmp	r3, #62	; 0x3e
 80048e8:	d81b      	bhi.n	8004922 <USB_EPStartXfer+0x30a>
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <USB_EPStartXfer+0x2f2>
 8004900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800490a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29a      	uxth	r2, r3
 8004914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e059      	b.n	80049d6 <USB_EPStartXfer+0x3be>
 8004922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800492c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <USB_EPStartXfer+0x32a>
 8004938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800493c:	3b01      	subs	r3, #1
 800493e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004946:	b29b      	uxth	r3, r3
 8004948:	029b      	lsls	r3, r3, #10
 800494a:	b29b      	uxth	r3, r3
 800494c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004954:	b29a      	uxth	r2, r3
 8004956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e038      	b.n	80049d6 <USB_EPStartXfer+0x3be>
 8004964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d130      	bne.n	80049d6 <USB_EPStartXfer+0x3be>
 8004974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	4619      	mov	r1, r3
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800498e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004992:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	440a      	add	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4413      	add	r3, r2
 80049b6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80049ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	895b      	ldrh	r3, [r3, #10]
 80049e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6959      	ldr	r1, [r3, #20]
 80049f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80049fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a04:	6800      	ldr	r0, [r0, #0]
 8004a06:	f001 fd7d 	bl	8006504 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1a:	441a      	add	r2, r3
 8004a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d90f      	bls.n	8004a64 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a54:	1ad2      	subs	r2, r2, r3
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e00e      	b.n	8004a82 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 809a 	bne.w	8004bc8 <USB_EPStartXfer+0x5b0>
 8004a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aa0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ac2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ac6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	440a      	add	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	011a      	lsls	r2, r3, #4
 8004ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d122      	bne.n	8004b46 <USB_EPStartXfer+0x52e>
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e083      	b.n	8004c4e <USB_EPStartXfer+0x636>
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b4c:	d81b      	bhi.n	8004b86 <USB_EPStartXfer+0x56e>
 8004b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <USB_EPStartXfer+0x556>
 8004b64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e063      	b.n	8004c4e <USB_EPStartXfer+0x636>
 8004b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <USB_EPStartXfer+0x58e>
 8004b9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ba6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e042      	b.n	8004c4e <USB_EPStartXfer+0x636>
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d13a      	bne.n	8004c4e <USB_EPStartXfer+0x636>
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004be0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004be4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c0a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	440a      	add	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	891b      	ldrh	r3, [r3, #8]
 8004c5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6959      	ldr	r1, [r3, #20]
 8004c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f001 fc41 	bl	8006504 <USB_WritePMA>
 8004c82:	f000 be0e 	b.w	80058a2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d16d      	bne.n	8004d72 <USB_EPStartXfer+0x75a>
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	4413      	add	r3, r2
 8004cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	011a      	lsls	r2, r3, #4
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cca:	4413      	add	r3, r2
 8004ccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d112      	bne.n	8004d00 <USB_EPStartXfer+0x6e8>
 8004cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	e063      	b.n	8004dc8 <USB_EPStartXfer+0x7b0>
 8004d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d04:	2b3e      	cmp	r3, #62	; 0x3e
 8004d06:	d817      	bhi.n	8004d38 <USB_EPStartXfer+0x720>
 8004d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <USB_EPStartXfer+0x710>
 8004d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d22:	3301      	adds	r3, #1
 8004d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	029b      	lsls	r3, r3, #10
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e047      	b.n	8004dc8 <USB_EPStartXfer+0x7b0>
 8004d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <USB_EPStartXfer+0x740>
 8004d4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d52:	3b01      	subs	r3, #1
 8004d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e02a      	b.n	8004dc8 <USB_EPStartXfer+0x7b0>
 8004d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d122      	bne.n	8004dc8 <USB_EPStartXfer+0x7b0>
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da2:	4413      	add	r3, r2
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
 8004da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	011a      	lsls	r2, r3, #4
 8004db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db6:	4413      	add	r3, r2
 8004db8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	891b      	ldrh	r3, [r3, #8]
 8004dd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6959      	ldr	r1, [r3, #20]
 8004de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004df2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004df6:	6800      	ldr	r0, [r0, #0]
 8004df8:	f001 fb84 	bl	8006504 <USB_WritePMA>
            ep->xfer_buff += len;
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d90f      	bls.n	8004e56 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	621a      	str	r2, [r3, #32]
 8004e54:	e00e      	b.n	8004e74 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d16d      	bne.n	8004f6c <USB_EPStartXfer+0x954>
 8004e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	4413      	add	r3, r2
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	011a      	lsls	r2, r3, #4
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d112      	bne.n	8004efa <USB_EPStartXfer+0x8e2>
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e05d      	b.n	8004fb6 <USB_EPStartXfer+0x99e>
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	2b3e      	cmp	r3, #62	; 0x3e
 8004f00:	d817      	bhi.n	8004f32 <USB_EPStartXfer+0x91a>
 8004f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <USB_EPStartXfer+0x90a>
 8004f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e041      	b.n	8004fb6 <USB_EPStartXfer+0x99e>
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <USB_EPStartXfer+0x93a>
 8004f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e024      	b.n	8004fb6 <USB_EPStartXfer+0x99e>
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11c      	bne.n	8004fb6 <USB_EPStartXfer+0x99e>
 8004f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f90:	4413      	add	r3, r2
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	011a      	lsls	r2, r3, #4
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	895b      	ldrh	r3, [r3, #10]
 8004fc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6959      	ldr	r1, [r3, #20]
 8004fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fe0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fe4:	6800      	ldr	r0, [r0, #0]
 8004fe6:	f001 fa8d 	bl	8006504 <USB_WritePMA>
 8004fea:	f000 bc5a 	b.w	80058a2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005024:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507a:	4413      	add	r3, r2
 800507c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	011a      	lsls	r2, r3, #4
 800508c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508e:	4413      	add	r3, r2
 8005090:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005094:	65bb      	str	r3, [r7, #88]	; 0x58
 8005096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509a:	b29a      	uxth	r2, r3
 800509c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800509e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	891b      	ldrh	r3, [r3, #8]
 80050ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	f001 fa18 	bl	8006504 <USB_WritePMA>
 80050d4:	e3e5      	b.n	80058a2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	1ad2      	subs	r2, r2, r3
 8005144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 81bc 	beq.w	80054f0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d16d      	bne.n	8005272 <USB_EPStartXfer+0xc5a>
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	4413      	add	r3, r2
 80051b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	011a      	lsls	r2, r3, #4
 80051c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d0:	677b      	str	r3, [r7, #116]	; 0x74
 80051d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d112      	bne.n	8005200 <USB_EPStartXfer+0xbe8>
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e060      	b.n	80052c2 <USB_EPStartXfer+0xcaa>
 8005200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005204:	2b3e      	cmp	r3, #62	; 0x3e
 8005206:	d817      	bhi.n	8005238 <USB_EPStartXfer+0xc20>
 8005208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <USB_EPStartXfer+0xc10>
 800521e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005222:	3301      	adds	r3, #1
 8005224:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005228:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800522c:	b29b      	uxth	r3, r3
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	b29a      	uxth	r2, r3
 8005232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e044      	b.n	80052c2 <USB_EPStartXfer+0xcaa>
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <USB_EPStartXfer+0xc40>
 800524e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005252:	3b01      	subs	r3, #1
 8005254:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005258:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800525c:	b29b      	uxth	r3, r3
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526a:	b29a      	uxth	r2, r3
 800526c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e027      	b.n	80052c2 <USB_EPStartXfer+0xcaa>
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d11f      	bne.n	80052c2 <USB_EPStartXfer+0xcaa>
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005298:	4413      	add	r3, r2
 800529a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800529e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	895b      	ldrh	r3, [r3, #10]
 80052ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6959      	ldr	r1, [r3, #20]
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052f0:	6800      	ldr	r0, [r0, #0]
 80052f2:	f001 f907 	bl	8006504 <USB_WritePMA>
          ep->xfer_buff += len;
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005306:	441a      	add	r2, r3
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d90f      	bls.n	8005350 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	621a      	str	r2, [r3, #32]
 800534e:	e00e      	b.n	800536e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8295 	beq.w	80058a2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d16d      	bne.n	8005464 <USB_EPStartXfer+0xe4c>
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	66bb      	str	r3, [r7, #104]	; 0x68
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053a8:	4413      	add	r3, r2
 80053aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053bc:	4413      	add	r3, r2
 80053be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c2:	667b      	str	r3, [r7, #100]	; 0x64
 80053c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d112      	bne.n	80053f2 <USB_EPStartXfer+0xdda>
 80053cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e063      	b.n	80054ba <USB_EPStartXfer+0xea2>
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d817      	bhi.n	800542a <USB_EPStartXfer+0xe12>
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <USB_EPStartXfer+0xe02>
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005414:	3301      	adds	r3, #1
 8005416:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29a      	uxth	r2, r3
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e047      	b.n	80054ba <USB_EPStartXfer+0xea2>
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <USB_EPStartXfer+0xe32>
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	3b01      	subs	r3, #1
 8005446:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e02a      	b.n	80054ba <USB_EPStartXfer+0xea2>
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d122      	bne.n	80054ba <USB_EPStartXfer+0xea2>
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	673b      	str	r3, [r7, #112]	; 0x70
 8005480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005494:	4413      	add	r3, r2
 8005496:	673b      	str	r3, [r7, #112]	; 0x70
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	011a      	lsls	r2, r3, #4
 80054a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	891b      	ldrh	r3, [r3, #8]
 80054c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6959      	ldr	r1, [r3, #20]
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054e8:	6800      	ldr	r0, [r0, #0]
 80054ea:	f001 f80b 	bl	8006504 <USB_WritePMA>
 80054ee:	e1d8      	b.n	80058a2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d178      	bne.n	80055f2 <USB_EPStartXfer+0xfda>
 8005500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800550e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005524:	4413      	add	r3, r2
 8005526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	011a      	lsls	r2, r3, #4
 8005538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800553c:	4413      	add	r3, r2
 800553e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005542:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <USB_EPStartXfer+0xf64>
 800554e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800555a:	b29a      	uxth	r2, r3
 800555c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e06b      	b.n	8005654 <USB_EPStartXfer+0x103c>
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	2b3e      	cmp	r3, #62	; 0x3e
 8005582:	d818      	bhi.n	80055b6 <USB_EPStartXfer+0xf9e>
 8005584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <USB_EPStartXfer+0xf8c>
 800559a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800559e:	3301      	adds	r3, #1
 80055a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e04e      	b.n	8005654 <USB_EPStartXfer+0x103c>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <USB_EPStartXfer+0xfbe>
 80055cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e030      	b.n	8005654 <USB_EPStartXfer+0x103c>
 80055f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d128      	bne.n	8005654 <USB_EPStartXfer+0x103c>
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005626:	4413      	add	r3, r2
 8005628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800563e:	4413      	add	r3, r2
 8005640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564c:	b29a      	uxth	r2, r3
 800564e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005652:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	891b      	ldrh	r3, [r3, #8]
 8005660:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005674:	b29b      	uxth	r3, r3
 8005676:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800567a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800567e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	f000 ff3e 	bl	8006504 <USB_WritePMA>
          ep->xfer_buff += len;
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005698:	441a      	add	r2, r3
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a1a      	ldr	r2, [r3, #32]
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d90f      	bls.n	80056e2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	621a      	str	r2, [r3, #32]
 80056e0:	e00e      	b.n	8005700 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80056e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80cc 	beq.w	80058a2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d178      	bne.n	800581a <USB_EPStartXfer+0x1202>
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800574c:	4413      	add	r3, r2
 800574e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	011a      	lsls	r2, r3, #4
 8005760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005764:	4413      	add	r3, r2
 8005766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800576a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800576e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <USB_EPStartXfer+0x118c>
 8005776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e064      	b.n	800586e <USB_EPStartXfer+0x1256>
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	2b3e      	cmp	r3, #62	; 0x3e
 80057aa:	d818      	bhi.n	80057de <USB_EPStartXfer+0x11c6>
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <USB_EPStartXfer+0x11b4>
 80057c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e047      	b.n	800586e <USB_EPStartXfer+0x1256>
 80057de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <USB_EPStartXfer+0x11e6>
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f8:	3b01      	subs	r3, #1
 80057fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e029      	b.n	800586e <USB_EPStartXfer+0x1256>
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d121      	bne.n	800586e <USB_EPStartXfer+0x1256>
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005838:	b29b      	uxth	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005840:	4413      	add	r3, r2
 8005842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	011a      	lsls	r2, r3, #4
 8005854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005858:	4413      	add	r3, r2
 800585a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800585e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005866:	b29a      	uxth	r2, r3
 8005868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	895b      	ldrh	r3, [r3, #10]
 800587a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6959      	ldr	r1, [r3, #20]
 800588a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588e:	b29b      	uxth	r3, r3
 8005890:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005894:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005898:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f000 fe31 	bl	8006504 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058c4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d0:	8013      	strh	r3, [r2, #0]
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80058da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058de:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058e2:	8812      	ldrh	r2, [r2, #0]
 80058e4:	f082 0210 	eor.w	r2, r2, #16
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ee:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80058f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058f6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80058fa:	8812      	ldrh	r2, [r2, #0]
 80058fc:	f082 0220 	eor.w	r2, r2, #32
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
 800593a:	f000 bc9f 	b.w	800627c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800593e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	7b1b      	ldrb	r3, [r3, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 80ae 	bne.w	8005aac <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d917      	bls.n	800599c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	619a      	str	r2, [r3, #24]
 800599a:	e00e      	b.n	80059ba <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800599c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059de:	4413      	add	r3, r2
 80059e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <USB_EPStartXfer+0x141e>
 8005a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e3e8      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a3c:	d818      	bhi.n	8005a70 <USB_EPStartXfer+0x1458>
 8005a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <USB_EPStartXfer+0x1446>
 8005a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e3cb      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <USB_EPStartXfer+0x1478>
 8005a86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e3ad      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	f040 8200 	bne.w	8005ebe <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8091 	bne.w	8005bf2 <USB_EPStartXfer+0x15da>
 8005ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	011a      	lsls	r2, r3, #4
 8005b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d116      	bne.n	8005b54 <USB_EPStartXfer+0x153c>
 8005b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e083      	b.n	8005c5c <USB_EPStartXfer+0x1644>
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b3e      	cmp	r3, #62	; 0x3e
 8005b62:	d820      	bhi.n	8005ba6 <USB_EPStartXfer+0x158e>
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <USB_EPStartXfer+0x157c>
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	029b      	lsls	r3, r3, #10
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	e05a      	b.n	8005c5c <USB_EPStartXfer+0x1644>
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <USB_EPStartXfer+0x15be>
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e034      	b.n	8005c5c <USB_EPStartXfer+0x1644>
 8005bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d12c      	bne.n	8005c5c <USB_EPStartXfer+0x1644>
 8005c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c26:	4413      	add	r3, r2
 8005c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	011a      	lsls	r2, r3, #4
 8005c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3e:	4413      	add	r3, r2
 8005c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 8091 	bne.w	8005d9e <USB_EPStartXfer+0x1786>
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	011a      	lsls	r2, r3, #4
 8005cb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d116      	bne.n	8005d00 <USB_EPStartXfer+0x16e8>
 8005cd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e07c      	b.n	8005dfa <USB_EPStartXfer+0x17e2>
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0e:	d820      	bhi.n	8005d52 <USB_EPStartXfer+0x173a>
 8005d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <USB_EPStartXfer+0x1728>
 8005d36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	e053      	b.n	8005dfa <USB_EPStartXfer+0x17e2>
 8005d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <USB_EPStartXfer+0x176a>
 8005d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e02d      	b.n	8005dfa <USB_EPStartXfer+0x17e2>
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d125      	bne.n	8005dfa <USB_EPStartXfer+0x17e2>
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 81fe 	beq.w	8006208 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e2c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <USB_EPStartXfer+0x182c>
 8005e38:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e44:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 81db 	bne.w	8006208 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e52:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 81d4 	bne.w	8006208 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
 8005ebc:	e1a4      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 819a 	bne.w	8006204 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d917      	bls.n	8005f1c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	619a      	str	r2, [r3, #24]
 8005f1a:	e00e      	b.n	8005f3a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d178      	bne.n	800603c <USB_EPStartXfer+0x1a24>
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f6e:	4413      	add	r3, r2
 8005f70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f86:	4413      	add	r3, r2
 8005f88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d116      	bne.n	8005fc6 <USB_EPStartXfer+0x19ae>
 8005f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e06b      	b.n	800609e <USB_EPStartXfer+0x1a86>
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	2b3e      	cmp	r3, #62	; 0x3e
 8005fcc:	d818      	bhi.n	8006000 <USB_EPStartXfer+0x19e8>
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <USB_EPStartXfer+0x19d6>
 8005fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	e04e      	b.n	800609e <USB_EPStartXfer+0x1a86>
 8006000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <USB_EPStartXfer+0x1a08>
 8006016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601a:	3b01      	subs	r3, #1
 800601c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e030      	b.n	800609e <USB_EPStartXfer+0x1a86>
 800603c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d128      	bne.n	800609e <USB_EPStartXfer+0x1a86>
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800605a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	4413      	add	r3, r2
 8006072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	011a      	lsls	r2, r3, #4
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	4413      	add	r3, r2
 800608a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800608e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d178      	bne.n	80061ae <USB_EPStartXfer+0x1b96>
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e0:	4413      	add	r3, r2
 80060e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	011a      	lsls	r2, r3, #4
 80060f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <USB_EPStartXfer+0x1b20>
 800610a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612e:	b29a      	uxth	r2, r3
 8006130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	e067      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
 8006138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613c:	2b3e      	cmp	r3, #62	; 0x3e
 800613e:	d818      	bhi.n	8006172 <USB_EPStartXfer+0x1b5a>
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800614a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <USB_EPStartXfer+0x1b48>
 8006156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615a:	3301      	adds	r3, #1
 800615c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006160:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006164:	b29b      	uxth	r3, r3
 8006166:	029b      	lsls	r3, r3, #10
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e04a      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800617c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <USB_EPStartXfer+0x1b7a>
 8006188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800618c:	3b01      	subs	r3, #1
 800618e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e02c      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d124      	bne.n	8006208 <USB_EPStartXfer+0x1bf0>
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d4:	4413      	add	r3, r2
 80061d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	011a      	lsls	r2, r3, #4
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e001      	b.n	8006208 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e03a      	b.n	800627e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006232:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006236:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800623a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800623e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006242:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006246:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d020      	beq.n	80062dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b0:	81bb      	strh	r3, [r7, #12]
 80062b2:	89bb      	ldrh	r3, [r7, #12]
 80062b4:	f083 0310 	eor.w	r3, r3, #16
 80062b8:	81bb      	strh	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	441a      	add	r2, r3
 80062c4:	89bb      	ldrh	r3, [r7, #12]
 80062c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	8013      	strh	r3, [r2, #0]
 80062da:	e01f      	b.n	800631c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	81fb      	strh	r3, [r7, #14]
 80062f4:	89fb      	ldrh	r3, [r7, #14]
 80062f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062fa:	81fb      	strh	r3, [r7, #14]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	89fb      	ldrh	r3, [r7, #14]
 8006308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	b29b      	uxth	r3, r3
 800631a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	7b1b      	ldrb	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 809d 	bne.w	8006476 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d04c      	beq.n	80063de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	823b      	strh	r3, [r7, #16]
 8006352:	8a3b      	ldrh	r3, [r7, #16]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01b      	beq.n	8006394 <USB_EPClearStall+0x6c>
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	81fb      	strh	r3, [r7, #14]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006390:	b29b      	uxth	r3, r3
 8006392:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d06c      	beq.n	8006476 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b2:	81bb      	strh	r3, [r7, #12]
 80063b4:	89bb      	ldrh	r3, [r7, #12]
 80063b6:	f083 0320 	eor.w	r3, r3, #32
 80063ba:	81bb      	strh	r3, [r7, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	89bb      	ldrh	r3, [r7, #12]
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
 80063dc:	e04b      	b.n	8006476 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	82fb      	strh	r3, [r7, #22]
 80063ec:	8afb      	ldrh	r3, [r7, #22]
 80063ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01b      	beq.n	800642e <USB_EPClearStall+0x106>
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	82bb      	strh	r3, [r7, #20]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	441a      	add	r2, r3
 8006418:	8abb      	ldrh	r3, [r7, #20]
 800641a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642a:	b29b      	uxth	r3, r3
 800642c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	827b      	strh	r3, [r7, #18]
 8006446:	8a7b      	ldrh	r3, [r7, #18]
 8006448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800644c:	827b      	strh	r3, [r7, #18]
 800644e:	8a7b      	ldrh	r3, [r7, #18]
 8006450:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006454:	827b      	strh	r3, [r7, #18]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	8a7b      	ldrh	r3, [r7, #18]
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr

08006482 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064de:	b29b      	uxth	r3, r3
 80064e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80064e2:	68fb      	ldr	r3, [r7, #12]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006504:	b480      	push	{r7}
 8006506:	b08d      	sub	sp, #52	; 0x34
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	460b      	mov	r3, r1
 8006514:	80fb      	strh	r3, [r7, #6]
 8006516:	4613      	mov	r3, r2
 8006518:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800651a:	88bb      	ldrh	r3, [r7, #4]
 800651c:	3301      	adds	r3, #1
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	005a      	lsls	r2, r3, #1
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800653c:	e01e      	b.n	800657c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	3301      	adds	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	b29a      	uxth	r2, r3
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	3302      	adds	r3, #2
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	3302      	adds	r3, #2
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	3301      	adds	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	3b01      	subs	r3, #1
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1dd      	bne.n	800653e <USB_WritePMA+0x3a>
  }
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	3734      	adds	r7, #52	; 0x34
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800658e:	b480      	push	{r7}
 8006590:	b08b      	sub	sp, #44	; 0x2c
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	4611      	mov	r1, r2
 800659a:	461a      	mov	r2, r3
 800659c:	460b      	mov	r3, r1
 800659e:	80fb      	strh	r3, [r7, #6]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065a4:	88bb      	ldrh	r3, [r7, #4]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	005a      	lsls	r2, r3, #1
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
 80065c6:	e01b      	b.n	8006600 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	3302      	adds	r3, #2
 80065d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	3302      	adds	r3, #2
 80065f8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	3b01      	subs	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e0      	bne.n	80065c8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006606:	88bb      	ldrh	r3, [r7, #4]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	701a      	strb	r2, [r3, #0]
  }
}
 8006622:	bf00      	nop
 8006624:	372c      	adds	r7, #44	; 0x2c
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7c1b      	ldrb	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d115      	bne.n	8006670 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006648:	2202      	movs	r2, #2
 800664a:	2181      	movs	r1, #129	; 0x81
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fe30 	bl	80082b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665c:	2202      	movs	r2, #2
 800665e:	2101      	movs	r1, #1
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fe26 	bl	80082b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800666e:	e012      	b.n	8006696 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006670:	2340      	movs	r3, #64	; 0x40
 8006672:	2202      	movs	r2, #2
 8006674:	2181      	movs	r1, #129	; 0x81
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fe1b 	bl	80082b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	2202      	movs	r2, #2
 8006686:	2101      	movs	r1, #1
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fe12 	bl	80082b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006696:	2308      	movs	r3, #8
 8006698:	2203      	movs	r2, #3
 800669a:	2182      	movs	r1, #130	; 0x82
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fe08 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066ac:	f001 ff28 	bl	8008500 <USBD_static_malloc>
 80066b0:	4602      	mov	r2, r0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	e026      	b.n	8006716 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7c1b      	ldrb	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fc:	2101      	movs	r1, #1
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fec8 	bl	8008494 <USBD_LL_PrepareReceive>
 8006704:	e007      	b.n	8006716 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	2101      	movs	r1, #1
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 febf 	bl	8008494 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006730:	2181      	movs	r1, #129	; 0x81
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fde3 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800673e:	2101      	movs	r1, #1
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fddc 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800674e:	2182      	movs	r1, #130	; 0x82
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fdd4 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fece 	bl	8008518 <USBD_static_free>
    pdev->pClassData = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d039      	beq.n	800682c <USBD_CDC_Setup+0x9e>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d17f      	bne.n	80068bc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	88db      	ldrh	r3, [r3, #6]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d029      	beq.n	8006818 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da11      	bge.n	80067f2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80067da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	88d2      	ldrh	r2, [r2, #6]
 80067e0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067e2:	6939      	ldr	r1, [r7, #16]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	88db      	ldrh	r3, [r3, #6]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f9d9 	bl	8007ba2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80067f0:	e06b      	b.n	80068ca <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785a      	ldrb	r2, [r3, #1]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006808:	6939      	ldr	r1, [r7, #16]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	461a      	mov	r2, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f9f4 	bl	8007bfe <USBD_CtlPrepareRx>
      break;
 8006816:	e058      	b.n	80068ca <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	7850      	ldrb	r0, [r2, #1]
 8006824:	2200      	movs	r2, #0
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	4798      	blx	r3
      break;
 800682a:	e04e      	b.n	80068ca <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b0b      	cmp	r3, #11
 8006832:	d02e      	beq.n	8006892 <USBD_CDC_Setup+0x104>
 8006834:	2b0b      	cmp	r3, #11
 8006836:	dc38      	bgt.n	80068aa <USBD_CDC_Setup+0x11c>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <USBD_CDC_Setup+0xb4>
 800683c:	2b0a      	cmp	r3, #10
 800683e:	d014      	beq.n	800686a <USBD_CDC_Setup+0xdc>
 8006840:	e033      	b.n	80068aa <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006848:	2b03      	cmp	r3, #3
 800684a:	d107      	bne.n	800685c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800684c:	f107 030c 	add.w	r3, r7, #12
 8006850:	2202      	movs	r2, #2
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f9a4 	bl	8007ba2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800685a:	e02e      	b.n	80068ba <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 f935 	bl	8007ace <USBD_CtlError>
            ret = USBD_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	75fb      	strb	r3, [r7, #23]
          break;
 8006868:	e027      	b.n	80068ba <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	2b03      	cmp	r3, #3
 8006872:	d107      	bne.n	8006884 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006874:	f107 030f 	add.w	r3, r7, #15
 8006878:	2201      	movs	r2, #1
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f990 	bl	8007ba2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006882:	e01a      	b.n	80068ba <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f921 	bl	8007ace <USBD_CtlError>
            ret = USBD_FAIL;
 800688c:	2302      	movs	r3, #2
 800688e:	75fb      	strb	r3, [r7, #23]
          break;
 8006890:	e013      	b.n	80068ba <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006898:	2b03      	cmp	r3, #3
 800689a:	d00d      	beq.n	80068b8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 f915 	bl	8007ace <USBD_CtlError>
            ret = USBD_FAIL;
 80068a4:	2302      	movs	r3, #2
 80068a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068a8:	e006      	b.n	80068b8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f90e 	bl	8007ace <USBD_CtlError>
          ret = USBD_FAIL;
 80068b2:	2302      	movs	r3, #2
 80068b4:	75fb      	strb	r3, [r7, #23]
          break;
 80068b6:	e000      	b.n	80068ba <USBD_CDC_Setup+0x12c>
          break;
 80068b8:	bf00      	nop
      }
      break;
 80068ba:	e006      	b.n	80068ca <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 f905 	bl	8007ace <USBD_CtlError>
      ret = USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
      break;
 80068c8:	bf00      	nop
  }

  return ret;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ee:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d03a      	beq.n	8006970 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	331c      	adds	r3, #28
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d029      	beq.n	8006964 <USBD_CDC_DataIn+0x90>
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	331c      	adds	r3, #28
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	78f9      	ldrb	r1, [r7, #3]
 8006924:	68b8      	ldr	r0, [r7, #8]
 8006926:	460b      	mov	r3, r1
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4403      	add	r3, r0
 8006930:	3338      	adds	r3, #56	; 0x38
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	fbb2 f1f3 	udiv	r1, r2, r3
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d110      	bne.n	8006964 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	331c      	adds	r3, #28
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006956:	78f9      	ldrb	r1, [r7, #3]
 8006958:	2300      	movs	r3, #0
 800695a:	2200      	movs	r2, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fd76 	bl	800844e <USBD_LL_Transmit>
 8006962:	e003      	b.n	800696c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 fda1 	bl	80084da <USBD_LL_GetRxDataSize>
 8006998:	4602      	mov	r2, r0
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069be:	4611      	mov	r1, r2
 80069c0:	4798      	blx	r3

    return USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069de:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d015      	beq.n	8006a16 <USBD_CDC_EP0_RxReady+0x46>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069f0:	2bff      	cmp	r3, #255	; 0xff
 80069f2:	d010      	beq.n	8006a16 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a02:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2243      	movs	r2, #67	; 0x43
 8006a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a2e:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000094 	.word	0x20000094

08006a40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2243      	movs	r2, #67	; 0x43
 8006a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006a4e:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000050 	.word	0x20000050

08006a60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2243      	movs	r2, #67	; 0x43
 8006a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a6e:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	200000d8 	.word	0x200000d8

08006a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	220a      	movs	r2, #10
 8006a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr

08006b24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7c1b      	ldrb	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b50:	2101      	movs	r1, #1
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc9e 	bl	8008494 <USBD_LL_PrepareReceive>
 8006b58:	e007      	b.n	8006b6a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	2101      	movs	r1, #1
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fc95 	bl	8008494 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
  }
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e01a      	b.n	8006bc6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	79fa      	ldrb	r2, [r7, #7]
 8006bbc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f001 fb02 	bl	80081c8 <USBD_LL_Init>

  return USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
 8006bee:	e001      	b.n	8006bf4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fb37 	bl	800827c <USBD_LL_Start>

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	4611      	mov	r1, r2
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	4611      	mov	r1, r2
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fed7 	bl	8007a56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d016      	beq.n	8006cfa <USBD_LL_SetupStage+0x6a>
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d81c      	bhi.n	8006d0a <USBD_LL_SetupStage+0x7a>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_LL_SetupStage+0x4a>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d008      	beq.n	8006cea <USBD_LL_SetupStage+0x5a>
 8006cd8:	e017      	b.n	8006d0a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9ca 	bl	800707c <USBD_StdDevReq>
      break;
 8006ce8:	e01a      	b.n	8006d20 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa2c 	bl	8007150 <USBD_StdItfReq>
      break;
 8006cf8:	e012      	b.n	8006d20 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa6c 	bl	80071e0 <USBD_StdEPReq>
      break;
 8006d08:	e00a      	b.n	8006d20 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fb0f 	bl	800833c <USBD_LL_StallEP>
      break;
 8006d1e:	bf00      	nop
  }

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	460b      	mov	r3, r1
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d14b      	bne.n	8006dd6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d134      	bne.n	8006dba <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d919      	bls.n	8006d90 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d203      	bcs.n	8006d7e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	e002      	b.n	8006d84 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 ff56 	bl	8007c3a <USBD_CtlContinueRx>
 8006d8e:	e038      	b.n	8006e02 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d105      	bne.n	8006db2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 ff53 	bl	8007c5e <USBD_CtlSendStatus>
 8006db8:	e023      	b.n	8006e02 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc0:	2b05      	cmp	r3, #5
 8006dc2:	d11e      	bne.n	8006e02 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006dcc:	2100      	movs	r1, #0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f001 fab4 	bl	800833c <USBD_LL_StallEP>
 8006dd4:	e015      	b.n	8006e02 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00d      	beq.n	8006dfe <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d108      	bne.n	8006dfe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	7afa      	ldrb	r2, [r7, #11]
 8006df6:	4611      	mov	r1, r2
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	4798      	blx	r3
 8006dfc:	e001      	b.n	8006e02 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e000      	b.n	8006e04 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	460b      	mov	r3, r1
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d17f      	bne.n	8006f20 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3314      	adds	r3, #20
 8006e24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d15c      	bne.n	8006eea <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d915      	bls.n	8006e68 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fec0 	bl	8007bda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2100      	movs	r1, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 fb17 	bl	8008494 <USBD_LL_PrepareReceive>
 8006e66:	e04e      	b.n	8006f06 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	6912      	ldr	r2, [r2, #16]
 8006e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e74:	fb01 f202 	mul.w	r2, r1, r2
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d11c      	bne.n	8006eb8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d316      	bcc.n	8006eb8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d20f      	bcs.n	8006eb8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fe9c 	bl	8007bda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f001 faef 	bl	8008494 <USBD_LL_PrepareReceive>
 8006eb6:	e026      	b.n	8006f06 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d105      	bne.n	8006eda <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006eda:	2180      	movs	r1, #128	; 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f001 fa2d 	bl	800833c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 fece 	bl	8007c84 <USBD_CtlReceiveStatus>
 8006ee8:	e00d      	b.n	8006f06 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d004      	beq.n	8006efe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f001 fa1b 	bl	800833c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d11d      	bne.n	8006f4c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fe81 	bl	8006c18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f1e:	e015      	b.n	8006f4c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d108      	bne.n	8006f48 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	7afa      	ldrb	r2, [r7, #11]
 8006f40:	4611      	mov	r1, r2
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	4798      	blx	r3
 8006f46:	e001      	b.n	8006f4c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e000      	b.n	8006f4e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f5e:	2340      	movs	r3, #64	; 0x40
 8006f60:	2200      	movs	r2, #0
 8006f62:	2100      	movs	r1, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f9a4 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2240      	movs	r2, #64	; 0x40
 8006f76:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f996 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2240      	movs	r2, #64	; 0x40
 8006f90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6852      	ldr	r2, [r2, #4]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	4611      	mov	r1, r2
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
  }

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr

08006ff6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702c:	2b04      	cmp	r3, #4
 800702e:	d105      	bne.n	800703c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	2b03      	cmp	r3, #3
 8007058:	d10b      	bne.n	8007072 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d005      	beq.n	80070a2 <USBD_StdDevReq+0x26>
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d84f      	bhi.n	800713a <USBD_StdDevReq+0xbe>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <USBD_StdDevReq+0x36>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d14b      	bne.n	800713a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
      break;
 80070b0:	e048      	b.n	8007144 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	d839      	bhi.n	800712e <USBD_StdDevReq+0xb2>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBD_StdDevReq+0x44>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	08007111 	.word	0x08007111
 80070c4:	08007125 	.word	0x08007125
 80070c8:	0800712f 	.word	0x0800712f
 80070cc:	0800711b 	.word	0x0800711b
 80070d0:	0800712f 	.word	0x0800712f
 80070d4:	080070f3 	.word	0x080070f3
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	0800712f 	.word	0x0800712f
 80070e0:	08007107 	.word	0x08007107
 80070e4:	080070fd 	.word	0x080070fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9dc 	bl	80074a8 <USBD_GetDescriptor>
          break;
 80070f0:	e022      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb3f 	bl	8007778 <USBD_SetAddress>
          break;
 80070fa:	e01d      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fb7e 	bl	8007800 <USBD_SetConfig>
          break;
 8007104:	e018      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc07 	bl	800791c <USBD_GetConfig>
          break;
 800710e:	e013      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fc37 	bl	8007986 <USBD_GetStatus>
          break;
 8007118:	e00e      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc65 	bl	80079ec <USBD_SetFeature>
          break;
 8007122:	e009      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc74 	bl	8007a14 <USBD_ClrFeature>
          break;
 800712c:	e004      	b.n	8007138 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fccc 	bl	8007ace <USBD_CtlError>
          break;
 8007136:	bf00      	nop
      }
      break;
 8007138:	e004      	b.n	8007144 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fcc6 	bl	8007ace <USBD_CtlError>
      break;
 8007142:	bf00      	nop
  }

  return ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d005      	beq.n	8007176 <USBD_StdItfReq+0x26>
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d82e      	bhi.n	80071cc <USBD_StdItfReq+0x7c>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <USBD_StdItfReq+0x26>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d12a      	bne.n	80071cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	3b01      	subs	r3, #1
 800717e:	2b02      	cmp	r3, #2
 8007180:	d81d      	bhi.n	80071be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	889b      	ldrh	r3, [r3, #4]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d813      	bhi.n	80071b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d110      	bne.n	80071c8 <USBD_StdItfReq+0x78>
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10d      	bne.n	80071c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fd56 	bl	8007c5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071b2:	e009      	b.n	80071c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc89 	bl	8007ace <USBD_CtlError>
          break;
 80071bc:	e004      	b.n	80071c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc84 	bl	8007ace <USBD_CtlError>
          break;
 80071c6:	e000      	b.n	80071ca <USBD_StdItfReq+0x7a>
          break;
 80071c8:	bf00      	nop
      }
      break;
 80071ca:	e004      	b.n	80071d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc7d 	bl	8007ace <USBD_CtlError>
      break;
 80071d4:	bf00      	nop
  }

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	889b      	ldrh	r3, [r3, #4]
 80071f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d007      	beq.n	8007210 <USBD_StdEPReq+0x30>
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	f200 8146 	bhi.w	8007492 <USBD_StdEPReq+0x2b2>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <USBD_StdEPReq+0x40>
 800720a:	2b20      	cmp	r3, #32
 800720c:	f040 8141 	bne.w	8007492 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
      break;
 800721e:	e13d      	b.n	800749c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007228:	2b20      	cmp	r3, #32
 800722a:	d10a      	bne.n	8007242 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	e12d      	b.n	800749e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	2b03      	cmp	r3, #3
 8007248:	d007      	beq.n	800725a <USBD_StdEPReq+0x7a>
 800724a:	2b03      	cmp	r3, #3
 800724c:	f300 811b 	bgt.w	8007486 <USBD_StdEPReq+0x2a6>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d072      	beq.n	800733a <USBD_StdEPReq+0x15a>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d03a      	beq.n	80072ce <USBD_StdEPReq+0xee>
 8007258:	e115      	b.n	8007486 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	2b02      	cmp	r3, #2
 8007262:	d002      	beq.n	800726a <USBD_StdEPReq+0x8a>
 8007264:	2b03      	cmp	r3, #3
 8007266:	d015      	beq.n	8007294 <USBD_StdEPReq+0xb4>
 8007268:	e02b      	b.n	80072c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00c      	beq.n	800728a <USBD_StdEPReq+0xaa>
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d009      	beq.n	800728a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f85e 	bl	800833c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007280:	2180      	movs	r1, #128	; 0x80
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f85a 	bl	800833c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007288:	e020      	b.n	80072cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc1e 	bl	8007ace <USBD_CtlError>
              break;
 8007292:	e01b      	b.n	80072cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	885b      	ldrh	r3, [r3, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10e      	bne.n	80072ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <USBD_StdEPReq+0xda>
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d008      	beq.n	80072ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	88db      	ldrh	r3, [r3, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f841 	bl	800833c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fccf 	bl	8007c5e <USBD_CtlSendStatus>

              break;
 80072c0:	e004      	b.n	80072cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc02 	bl	8007ace <USBD_CtlError>
              break;
 80072ca:	bf00      	nop
          }
          break;
 80072cc:	e0e0      	b.n	8007490 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d002      	beq.n	80072de <USBD_StdEPReq+0xfe>
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d015      	beq.n	8007308 <USBD_StdEPReq+0x128>
 80072dc:	e026      	b.n	800732c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <USBD_StdEPReq+0x11e>
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b80      	cmp	r3, #128	; 0x80
 80072e8:	d009      	beq.n	80072fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 f824 	bl	800833c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 f820 	bl	800833c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072fc:	e01c      	b.n	8007338 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbe4 	bl	8007ace <USBD_CtlError>
              break;
 8007306:	e017      	b.n	8007338 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	885b      	ldrh	r3, [r3, #2]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d112      	bne.n	8007336 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 f82b 	bl	800837a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc9a 	bl	8007c5e <USBD_CtlSendStatus>
              }
              break;
 800732a:	e004      	b.n	8007336 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fbcd 	bl	8007ace <USBD_CtlError>
              break;
 8007334:	e000      	b.n	8007338 <USBD_StdEPReq+0x158>
              break;
 8007336:	bf00      	nop
          }
          break;
 8007338:	e0aa      	b.n	8007490 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	2b02      	cmp	r3, #2
 8007342:	d002      	beq.n	800734a <USBD_StdEPReq+0x16a>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d032      	beq.n	80073ae <USBD_StdEPReq+0x1ce>
 8007348:	e097      	b.n	800747a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <USBD_StdEPReq+0x180>
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d004      	beq.n	8007360 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fbb8 	bl	8007ace <USBD_CtlError>
                break;
 800735e:	e091      	b.n	8007484 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	da0b      	bge.n	8007380 <USBD_StdEPReq+0x1a0>
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	3310      	adds	r3, #16
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	e00b      	b.n	8007398 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2202      	movs	r2, #2
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fbfb 	bl	8007ba2 <USBD_CtlSendData>
              break;
 80073ac:	e06a      	b.n	8007484 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da11      	bge.n	80073da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3318      	adds	r3, #24
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d117      	bne.n	8007400 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fb7b 	bl	8007ace <USBD_CtlError>
                  break;
 80073d8:	e054      	b.n	8007484 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb68 	bl	8007ace <USBD_CtlError>
                  break;
 80073fe:	e041      	b.n	8007484 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007404:	2b00      	cmp	r3, #0
 8007406:	da0b      	bge.n	8007420 <USBD_StdEPReq+0x240>
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	3310      	adds	r3, #16
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4413      	add	r3, r2
 800741c:	3304      	adds	r3, #4
 800741e:	e00b      	b.n	8007438 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <USBD_StdEPReq+0x266>
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d103      	bne.n	800744e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e00e      	b.n	800746c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 ffb0 	bl	80083b8 <USBD_LL_IsStallEP>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e002      	b.n	800746c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2202      	movs	r2, #2
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb95 	bl	8007ba2 <USBD_CtlSendData>
              break;
 8007478:	e004      	b.n	8007484 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb26 	bl	8007ace <USBD_CtlError>
              break;
 8007482:	bf00      	nop
          }
          break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb20 	bl	8007ace <USBD_CtlError>
          break;
 800748e:	bf00      	nop
      }
      break;
 8007490:	e004      	b.n	800749c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb1a 	bl	8007ace <USBD_CtlError>
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	885b      	ldrh	r3, [r3, #2]
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	f200 8128 	bhi.w	800771e <USBD_GetDescriptor+0x276>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <USBD_GetDescriptor+0x2c>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	08007509 	.word	0x08007509
 80074dc:	08007549 	.word	0x08007549
 80074e0:	0800771f 	.word	0x0800771f
 80074e4:	0800771f 	.word	0x0800771f
 80074e8:	080076bf 	.word	0x080076bf
 80074ec:	080076eb 	.word	0x080076eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
      break;
 8007506:	e112      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7c1b      	ldrb	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10d      	bne.n	800752c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f107 0208 	add.w	r2, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	2202      	movs	r2, #2
 8007528:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800752a:	e100      	b.n	800772e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f107 0208 	add.w	r2, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
      break;
 8007546:	e0f2      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b05      	cmp	r3, #5
 8007550:	f200 80ac 	bhi.w	80076ac <USBD_GetDescriptor+0x204>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <USBD_GetDescriptor+0xb4>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007575 	.word	0x08007575
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075dd 	.word	0x080075dd
 8007568:	08007611 	.word	0x08007611
 800756c:	08007645 	.word	0x08007645
 8007570:	08007679 	.word	0x08007679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007596:	e091      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa97 	bl	8007ace <USBD_CtlError>
            err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
          break;
 80075a6:	e089      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ca:	e077      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa7d 	bl	8007ace <USBD_CtlError>
            err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
          break;
 80075da:	e06f      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fe:	e05d      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa63 	bl	8007ace <USBD_CtlError>
            err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
          break;
 800760e:	e055      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	7c12      	ldrb	r2, [r2, #16]
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007632:	e043      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa49 	bl	8007ace <USBD_CtlError>
            err++;
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	3301      	adds	r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
          break;
 8007642:	e03b      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007666:	e029      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa2f 	bl	8007ace <USBD_CtlError>
            err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
          break;
 8007676:	e021      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e00f      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa15 	bl	8007ace <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e007      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa0d 	bl	8007ace <USBD_CtlError>
          err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076ba:	e038      	b.n	800772e <USBD_GetDescriptor+0x286>
 80076bc:	e037      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7c1b      	ldrb	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f107 0208 	add.w	r2, r7, #8
 80076d2:	4610      	mov	r0, r2
 80076d4:	4798      	blx	r3
 80076d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076d8:	e029      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9f6 	bl	8007ace <USBD_CtlError>
        err++;
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	3301      	adds	r3, #1
 80076e6:	72fb      	strb	r3, [r7, #11]
      break;
 80076e8:	e021      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c1b      	ldrb	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	2207      	movs	r2, #7
 800770a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800770c:	e00f      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9dc 	bl	8007ace <USBD_CtlError>
        err++;
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	3301      	adds	r3, #1
 800771a:	72fb      	strb	r3, [r7, #11]
      break;
 800771c:	e007      	b.n	800772e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9d4 	bl	8007ace <USBD_CtlError>
      err++;
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	3301      	adds	r3, #1
 800772a:	72fb      	strb	r3, [r7, #11]
      break;
 800772c:	bf00      	nop
  }

  if (err != 0U)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11c      	bne.n	800776e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d011      	beq.n	800775e <USBD_GetDescriptor+0x2b6>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00d      	beq.n	800775e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88da      	ldrh	r2, [r3, #6]
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	4293      	cmp	r3, r2
 800774a:	bf28      	it	cs
 800774c:	4613      	movcs	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	461a      	mov	r2, r3
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa22 	bl	8007ba2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa79 	bl	8007c5e <USBD_CtlSendStatus>
 800776c:	e000      	b.n	8007770 <USBD_GetDescriptor+0x2c8>
    return;
 800776e:	bf00      	nop
    }
  }
}
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop

08007778 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	889b      	ldrh	r3, [r3, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d130      	bne.n	80077ec <USBD_SetAddress+0x74>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	88db      	ldrh	r3, [r3, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d12c      	bne.n	80077ec <USBD_SetAddress+0x74>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	885b      	ldrh	r3, [r3, #2]
 8007796:	2b7f      	cmp	r3, #127	; 0x7f
 8007798:	d828      	bhi.n	80077ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d104      	bne.n	80077ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f98b 	bl	8007ace <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b8:	e01d      	b.n	80077f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7bfa      	ldrb	r2, [r7, #15]
 80077be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fe22 	bl	8008410 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa46 	bl	8007c5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e0:	e009      	b.n	80077f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ea:	e004      	b.n	80077f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f96d 	bl	8007ace <USBD_CtlError>
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	4b41      	ldr	r3, [pc, #260]	; (8007918 <USBD_SetConfig+0x118>)
 8007812:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007814:	4b40      	ldr	r3, [pc, #256]	; (8007918 <USBD_SetConfig+0x118>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d904      	bls.n	8007826 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f955 	bl	8007ace <USBD_CtlError>
 8007824:	e075      	b.n	8007912 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	2b02      	cmp	r3, #2
 800782e:	d002      	beq.n	8007836 <USBD_SetConfig+0x36>
 8007830:	2b03      	cmp	r3, #3
 8007832:	d023      	beq.n	800787c <USBD_SetConfig+0x7c>
 8007834:	e062      	b.n	80078fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007836:	4b38      	ldr	r3, [pc, #224]	; (8007918 <USBD_SetConfig+0x118>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01a      	beq.n	8007874 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800783e:	4b36      	ldr	r3, [pc, #216]	; (8007918 <USBD_SetConfig+0x118>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2203      	movs	r2, #3
 800784c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007850:	4b31      	ldr	r3, [pc, #196]	; (8007918 <USBD_SetConfig+0x118>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f9e8 	bl	8006c2c <USBD_SetClassConfig>
 800785c:	4603      	mov	r3, r0
 800785e:	2b02      	cmp	r3, #2
 8007860:	d104      	bne.n	800786c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f932 	bl	8007ace <USBD_CtlError>
            return;
 800786a:	e052      	b.n	8007912 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f9f6 	bl	8007c5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007872:	e04e      	b.n	8007912 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f9f2 	bl	8007c5e <USBD_CtlSendStatus>
        break;
 800787a:	e04a      	b.n	8007912 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800787c:	4b26      	ldr	r3, [pc, #152]	; (8007918 <USBD_SetConfig+0x118>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d112      	bne.n	80078aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <USBD_SetConfig+0x118>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007896:	4b20      	ldr	r3, [pc, #128]	; (8007918 <USBD_SetConfig+0x118>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff f9e4 	bl	8006c6a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9db 	bl	8007c5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078a8:	e033      	b.n	8007912 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <USBD_SetConfig+0x118>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d01d      	beq.n	80078f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff f9d2 	bl	8006c6a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <USBD_SetConfig+0x118>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078d0:	4b11      	ldr	r3, [pc, #68]	; (8007918 <USBD_SetConfig+0x118>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff f9a8 	bl	8006c2c <USBD_SetClassConfig>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d104      	bne.n	80078ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8f2 	bl	8007ace <USBD_CtlError>
            return;
 80078ea:	e012      	b.n	8007912 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9b6 	bl	8007c5e <USBD_CtlSendStatus>
        break;
 80078f2:	e00e      	b.n	8007912 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f9b2 	bl	8007c5e <USBD_CtlSendStatus>
        break;
 80078fa:	e00a      	b.n	8007912 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8e5 	bl	8007ace <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <USBD_SetConfig+0x118>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff f9ad 	bl	8006c6a <USBD_ClrClassConfig>
        break;
 8007910:	bf00      	nop
    }
  }
}
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200001f4 	.word	0x200001f4

0800791c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d004      	beq.n	8007938 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f8cc 	bl	8007ace <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007936:	e022      	b.n	800797e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793e:	2b02      	cmp	r3, #2
 8007940:	dc02      	bgt.n	8007948 <USBD_GetConfig+0x2c>
 8007942:	2b00      	cmp	r3, #0
 8007944:	dc03      	bgt.n	800794e <USBD_GetConfig+0x32>
 8007946:	e015      	b.n	8007974 <USBD_GetConfig+0x58>
 8007948:	2b03      	cmp	r3, #3
 800794a:	d00b      	beq.n	8007964 <USBD_GetConfig+0x48>
 800794c:	e012      	b.n	8007974 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3308      	adds	r3, #8
 8007958:	2201      	movs	r2, #1
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f920 	bl	8007ba2 <USBD_CtlSendData>
        break;
 8007962:	e00c      	b.n	800797e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	2201      	movs	r2, #1
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f918 	bl	8007ba2 <USBD_CtlSendData>
        break;
 8007972:	e004      	b.n	800797e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8a9 	bl	8007ace <USBD_CtlError>
        break;
 800797c:	bf00      	nop
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	3b01      	subs	r3, #1
 8007998:	2b02      	cmp	r3, #2
 800799a:	d81e      	bhi.n	80079da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d004      	beq.n	80079ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f891 	bl	8007ace <USBD_CtlError>
        break;
 80079ac:	e01a      	b.n	80079e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f043 0202 	orr.w	r2, r3, #2
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	330c      	adds	r3, #12
 80079ce:	2202      	movs	r2, #2
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8e5 	bl	8007ba2 <USBD_CtlSendData>
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f876 	bl	8007ace <USBD_CtlError>
      break;
 80079e2:	bf00      	nop
  }
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d106      	bne.n	8007a0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f929 	bl	8007c5e <USBD_CtlSendStatus>
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a24:	3b01      	subs	r3, #1
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d80b      	bhi.n	8007a42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d10c      	bne.n	8007a4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f90f 	bl	8007c5e <USBD_CtlSendStatus>
      }
      break;
 8007a40:	e004      	b.n	8007a4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f842 	bl	8007ace <USBD_CtlError>
      break;
 8007a4a:	e000      	b.n	8007a4e <USBD_ClrFeature+0x3a>
      break;
 8007a4c:	bf00      	nop
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	785a      	ldrb	r2, [r3, #1]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	3302      	adds	r3, #2
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	3303      	adds	r3, #3
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4413      	add	r3, r2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	3305      	adds	r3, #5
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	3306      	adds	r3, #6
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	3307      	adds	r3, #7
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	80da      	strh	r2, [r3, #6]

}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr

08007ace <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ad8:	2180      	movs	r1, #128	; 0x80
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fc2e 	bl	800833c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc2a 	bl	800833c <USBD_LL_StallEP>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d032      	beq.n	8007b6c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f834 	bl	8007b74 <USBD_GetLen>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	75fa      	strb	r2, [r7, #23]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	75fa      	strb	r2, [r7, #23]
 8007b32:	461a      	mov	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4413      	add	r3, r2
 8007b38:	2203      	movs	r2, #3
 8007b3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b3c:	e012      	b.n	8007b64 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	60fa      	str	r2, [r7, #12]
 8007b44:	7dfa      	ldrb	r2, [r7, #23]
 8007b46:	1c51      	adds	r1, r2, #1
 8007b48:	75f9      	strb	r1, [r7, #23]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	440a      	add	r2, r1
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	75fa      	strb	r2, [r7, #23]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4413      	add	r3, r2
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e8      	bne.n	8007b3e <USBD_GetString+0x4e>
    }
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b80:	e005      	b.n	8007b8e <USBD_GetLen+0x1a>
  {
    len++;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	3301      	adds	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f5      	bne.n	8007b82 <USBD_GetLen+0xe>
  }

  return len;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	2100      	movs	r1, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fc3f 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	2100      	movs	r1, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fc2d 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fc32 	bl	8008494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fc20 	bl	8008494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2204      	movs	r2, #4
 8007c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fbea 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2205      	movs	r2, #5
 8007c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c94:	2300      	movs	r3, #0
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fbfa 	bl	8008494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4912      	ldr	r1, [pc, #72]	; (8007cfc <MX_USB_DEVICE_Init+0x50>)
 8007cb4:	4812      	ldr	r0, [pc, #72]	; (8007d00 <MX_USB_DEVICE_Init+0x54>)
 8007cb6:	f7fe ff5f 	bl	8006b78 <USBD_Init>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cc0:	f7f8 fd08 	bl	80006d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cc4:	490f      	ldr	r1, [pc, #60]	; (8007d04 <MX_USB_DEVICE_Init+0x58>)
 8007cc6:	480e      	ldr	r0, [pc, #56]	; (8007d00 <MX_USB_DEVICE_Init+0x54>)
 8007cc8:	f7fe ff81 	bl	8006bce <USBD_RegisterClass>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cd2:	f7f8 fcff 	bl	80006d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cd6:	490c      	ldr	r1, [pc, #48]	; (8007d08 <MX_USB_DEVICE_Init+0x5c>)
 8007cd8:	4809      	ldr	r0, [pc, #36]	; (8007d00 <MX_USB_DEVICE_Init+0x54>)
 8007cda:	f7fe fee1 	bl	8006aa0 <USBD_CDC_RegisterInterface>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ce4:	f7f8 fcf6 	bl	80006d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ce8:	4805      	ldr	r0, [pc, #20]	; (8007d00 <MX_USB_DEVICE_Init+0x54>)
 8007cea:	f7fe ff89 	bl	8006c00 <USBD_Start>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cf4:	f7f8 fcee 	bl	80006d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cf8:	bf00      	nop
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	2000012c 	.word	0x2000012c
 8007d00:	200001f8 	.word	0x200001f8
 8007d04:	20000018 	.word	0x20000018
 8007d08:	2000011c 	.word	0x2000011c

08007d0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d10:	2200      	movs	r2, #0
 8007d12:	4905      	ldr	r1, [pc, #20]	; (8007d28 <CDC_Init_FS+0x1c>)
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <CDC_Init_FS+0x20>)
 8007d16:	f7fe fed9 	bl	8006acc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d1a:	4905      	ldr	r1, [pc, #20]	; (8007d30 <CDC_Init_FS+0x24>)
 8007d1c:	4803      	ldr	r0, [pc, #12]	; (8007d2c <CDC_Init_FS+0x20>)
 8007d1e:	f7fe feee 	bl	8006afe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200008a4 	.word	0x200008a4
 8007d2c:	200001f8 	.word	0x200001f8
 8007d30:	200004bc 	.word	0x200004bc

08007d34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr
	...

08007d44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
 8007d50:	4613      	mov	r3, r2
 8007d52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2b23      	cmp	r3, #35	; 0x23
 8007d58:	d84a      	bhi.n	8007df0 <CDC_Control_FS+0xac>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <CDC_Control_FS+0x1c>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007df1 	.word	0x08007df1
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007df1 	.word	0x08007df1
 8007d74:	08007df1 	.word	0x08007df1
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007df1 	.word	0x08007df1
 8007d80:	08007df1 	.word	0x08007df1
 8007d84:	08007df1 	.word	0x08007df1
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007df1 	.word	0x08007df1
 8007d90:	08007df1 	.word	0x08007df1
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007df1 	.word	0x08007df1
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007df1 	.word	0x08007df1
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	08007df1 	.word	0x08007df1
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df1 	.word	0x08007df1
 8007dd4:	08007df1 	.word	0x08007df1
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007df1 	.word	0x08007df1
 8007de8:	08007df1 	.word	0x08007df1
 8007dec:	08007df1 	.word	0x08007df1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007df0:	bf00      	nop
  }

  return (USBD_OK);
 8007df2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop

08007e00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4805      	ldr	r0, [pc, #20]	; (8007e24 <CDC_Receive_FS+0x24>)
 8007e0e:	f7fe fe76 	bl	8006afe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e12:	4804      	ldr	r0, [pc, #16]	; (8007e24 <CDC_Receive_FS+0x24>)
 8007e14:	f7fe fe86 	bl	8006b24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200001f8 	.word	0x200001f8

08007e28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	6039      	str	r1, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2212      	movs	r2, #18
 8007e38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20000148 	.word	0x20000148

08007e4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	2000015c 	.word	0x2000015c

08007e70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d105      	bne.n	8007e8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4907      	ldr	r1, [pc, #28]	; (8007ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e86:	4808      	ldr	r0, [pc, #32]	; (8007ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e88:	f7ff fe32 	bl	8007af0 <USBD_GetString>
 8007e8c:	e004      	b.n	8007e98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4904      	ldr	r1, [pc, #16]	; (8007ea4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e92:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e94:	f7ff fe2c 	bl	8007af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000c8c 	.word	0x20000c8c
 8007ea8:	08008660 	.word	0x08008660

08007eac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	4904      	ldr	r1, [pc, #16]	; (8007ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ebc:	4804      	ldr	r0, [pc, #16]	; (8007ed0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ebe:	f7ff fe17 	bl	8007af0 <USBD_GetString>
  return USBD_StrDesc;
 8007ec2:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000c8c 	.word	0x20000c8c
 8007ed0:	0800866c 	.word	0x0800866c

08007ed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	221a      	movs	r2, #26
 8007ee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ee6:	f000 f843 	bl	8007f70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007eea:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000160 	.word	0x20000160

08007ef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	6039      	str	r1, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d105      	bne.n	8007f16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4907      	ldr	r1, [pc, #28]	; (8007f2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f0e:	4808      	ldr	r0, [pc, #32]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f10:	f7ff fdee 	bl	8007af0 <USBD_GetString>
 8007f14:	e004      	b.n	8007f20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4904      	ldr	r1, [pc, #16]	; (8007f2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f1a:	4805      	ldr	r0, [pc, #20]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f1c:	f7ff fde8 	bl	8007af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000c8c 	.word	0x20000c8c
 8007f30:	08008680 	.word	0x08008680

08007f34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4907      	ldr	r1, [pc, #28]	; (8007f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f4a:	4808      	ldr	r0, [pc, #32]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f4c:	f7ff fdd0 	bl	8007af0 <USBD_GetString>
 8007f50:	e004      	b.n	8007f5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4904      	ldr	r1, [pc, #16]	; (8007f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f56:	4805      	ldr	r0, [pc, #20]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f58:	f7ff fdca 	bl	8007af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000c8c 	.word	0x20000c8c
 8007f6c:	0800868c 	.word	0x0800868c

08007f70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <Get_SerialNum+0x44>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <Get_SerialNum+0x48>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f82:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <Get_SerialNum+0x4c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f96:	2208      	movs	r2, #8
 8007f98:	4909      	ldr	r1, [pc, #36]	; (8007fc0 <Get_SerialNum+0x50>)
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f814 	bl	8007fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	4908      	ldr	r1, [pc, #32]	; (8007fc4 <Get_SerialNum+0x54>)
 8007fa4:	68b8      	ldr	r0, [r7, #8]
 8007fa6:	f000 f80f 	bl	8007fc8 <IntToUnicode>
  }
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	1ffff7e8 	.word	0x1ffff7e8
 8007fb8:	1ffff7ec 	.word	0x1ffff7ec
 8007fbc:	1ffff7f0 	.word	0x1ffff7f0
 8007fc0:	20000162 	.word	0x20000162
 8007fc4:	20000172 	.word	0x20000172

08007fc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]
 8007fde:	e027      	b.n	8008030 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	0f1b      	lsrs	r3, r3, #28
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d80b      	bhi.n	8008000 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	0f1b      	lsrs	r3, r3, #28
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3230      	adds	r2, #48	; 0x30
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e00a      	b.n	8008016 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	0f1b      	lsrs	r3, r3, #28
 8008004:	b2da      	uxtb	r2, r3
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	4619      	mov	r1, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	440b      	add	r3, r1
 8008010:	3237      	adds	r2, #55	; 0x37
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	3301      	adds	r3, #1
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	4413      	add	r3, r2
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	3301      	adds	r3, #1
 800802e:	75fb      	strb	r3, [r7, #23]
 8008030:	7dfa      	ldrb	r2, [r7, #23]
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	429a      	cmp	r2, r3
 8008036:	d3d3      	bcc.n	8007fe0 <IntToUnicode+0x18>
  }
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0d      	ldr	r2, [pc, #52]	; (8008088 <HAL_PCD_MspInit+0x44>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d113      	bne.n	800807e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <HAL_PCD_MspInit+0x48>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	4a0c      	ldr	r2, [pc, #48]	; (800808c <HAL_PCD_MspInit+0x48>)
 800805c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008060:	61d3      	str	r3, [r2, #28]
 8008062:	4b0a      	ldr	r3, [pc, #40]	; (800808c <HAL_PCD_MspInit+0x48>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800806e:	2200      	movs	r2, #0
 8008070:	2100      	movs	r1, #0
 8008072:	2014      	movs	r0, #20
 8008074:	f7f8 fd71 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008078:	2014      	movs	r0, #20
 800807a:	f7f8 fd8a 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40005c00 	.word	0x40005c00
 800808c:	40021000 	.word	0x40021000

08008090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f7fe fdf2 	bl	8006c90 <USBD_LL_SetupStage>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	440b      	add	r3, r1
 80080d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	4619      	mov	r1, r3
 80080de:	f7fe fe24 	bl	8006d2a <USBD_LL_DataOutStage>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	440b      	add	r3, r1
 800810a:	333c      	adds	r3, #60	; 0x3c
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	4619      	mov	r1, r3
 8008112:	f7fe fe7b 	bl	8006e0c <USBD_LL_DataInStage>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe ff8b 	bl	8007048 <USBD_LL_SOF>
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008142:	2301      	movs	r3, #1
 8008144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d001      	beq.n	8008152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800814e:	f7f8 fac1 	bl	80006d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008158:	7bfa      	ldrb	r2, [r7, #15]
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe ff3b 	bl	8006fd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fef4 	bl	8006f56 <USBD_LL_Reset>
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe ff35 	bl	8006ff6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <HAL_PCD_SuspendCallback+0x30>)
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	4a03      	ldr	r2, [pc, #12]	; (80081a8 <HAL_PCD_SuspendCallback+0x30>)
 800819a:	f043 0306 	orr.w	r3, r3, #6
 800819e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed00 	.word	0xe000ed00

080081ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe ff2f 	bl	800701e <USBD_LL_Resume>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80081d0:	4a28      	ldr	r2, [pc, #160]	; (8008274 <USBD_LL_Init+0xac>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a26      	ldr	r2, [pc, #152]	; (8008274 <USBD_LL_Init+0xac>)
 80081dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80081e0:	4b24      	ldr	r3, [pc, #144]	; (8008274 <USBD_LL_Init+0xac>)
 80081e2:	4a25      	ldr	r2, [pc, #148]	; (8008278 <USBD_LL_Init+0xb0>)
 80081e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <USBD_LL_Init+0xac>)
 80081e8:	2208      	movs	r2, #8
 80081ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081ec:	4b21      	ldr	r3, [pc, #132]	; (8008274 <USBD_LL_Init+0xac>)
 80081ee:	2202      	movs	r2, #2
 80081f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <USBD_LL_Init+0xac>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <USBD_LL_Init+0xac>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081fe:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <USBD_LL_Init+0xac>)
 8008200:	2200      	movs	r2, #0
 8008202:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008204:	481b      	ldr	r0, [pc, #108]	; (8008274 <USBD_LL_Init+0xac>)
 8008206:	f7f9 fac5 	bl	8001794 <HAL_PCD_Init>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008210:	f7f8 fa60 	bl	80006d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800821a:	2318      	movs	r3, #24
 800821c:	2200      	movs	r2, #0
 800821e:	2100      	movs	r1, #0
 8008220:	f7fa ff39 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800822a:	2358      	movs	r3, #88	; 0x58
 800822c:	2200      	movs	r2, #0
 800822e:	2180      	movs	r1, #128	; 0x80
 8008230:	f7fa ff31 	bl	8003096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800823a:	23c0      	movs	r3, #192	; 0xc0
 800823c:	2200      	movs	r2, #0
 800823e:	2181      	movs	r1, #129	; 0x81
 8008240:	f7fa ff29 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800824a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800824e:	2200      	movs	r2, #0
 8008250:	2101      	movs	r1, #1
 8008252:	f7fa ff20 	bl	8003096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800825c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008260:	2200      	movs	r2, #0
 8008262:	2182      	movs	r1, #130	; 0x82
 8008264:	f7fa ff17 	bl	8003096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000e8c 	.word	0x20000e8c
 8008278:	40005c00 	.word	0x40005c00

0800827c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008292:	4618      	mov	r0, r3
 8008294:	f7f9 fb89 	bl	80019aa <HAL_PCD_Start>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f94e 	bl	8008540 <USBD_Get_USB_Status>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	461a      	mov	r2, r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	70fb      	strb	r3, [r7, #3]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70bb      	strb	r3, [r7, #2]
 80082c8:	4613      	mov	r3, r2
 80082ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082da:	78bb      	ldrb	r3, [r7, #2]
 80082dc:	883a      	ldrh	r2, [r7, #0]
 80082de:	78f9      	ldrb	r1, [r7, #3]
 80082e0:	f7f9 fd01 	bl	8001ce6 <HAL_PCD_EP_Open>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f928 	bl	8008540 <USBD_Get_USB_Status>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7f9 fd48 	bl	8001db2 <HAL_PCD_EP_Close>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f909 	bl	8008540 <USBD_Get_USB_Status>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008332:	7bbb      	ldrb	r3, [r7, #14]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 fe08 	bl	8001f70 <HAL_PCD_EP_SetStall>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f8ea 	bl	8008540 <USBD_Get_USB_Status>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008370:	7bbb      	ldrb	r3, [r7, #14]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f7f9 fe49 	bl	8002030 <HAL_PCD_EP_ClrStall>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f8cb 	bl	8008540 <USBD_Get_USB_Status>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da0c      	bge.n	80083ee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	440b      	add	r3, r1
 80083e8:	3302      	adds	r3, #2
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	e00b      	b.n	8008406 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f4:	68f9      	ldr	r1, [r7, #12]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008404:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7f9 fc34 	bl	8001c9c <HAL_PCD_SetAddress>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f880 	bl	8008540 <USBD_Get_USB_Status>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008444:	7bbb      	ldrb	r3, [r7, #14]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	461a      	mov	r2, r3
 800845a:	460b      	mov	r3, r1
 800845c:	72fb      	strb	r3, [r7, #11]
 800845e:	4613      	mov	r3, r2
 8008460:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008470:	893b      	ldrh	r3, [r7, #8]
 8008472:	7af9      	ldrb	r1, [r7, #11]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f7f9 fd38 	bl	8001eea <HAL_PCD_EP_Transmit>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 f85d 	bl	8008540 <USBD_Get_USB_Status>
 8008486:	4603      	mov	r3, r0
 8008488:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800848a:	7dbb      	ldrb	r3, [r7, #22]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	607a      	str	r2, [r7, #4]
 800849e:	461a      	mov	r2, r3
 80084a0:	460b      	mov	r3, r1
 80084a2:	72fb      	strb	r3, [r7, #11]
 80084a4:	4613      	mov	r3, r2
 80084a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084b6:	893b      	ldrh	r3, [r7, #8]
 80084b8:	7af9      	ldrb	r1, [r7, #11]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f7f9 fcc1 	bl	8001e42 <HAL_PCD_EP_Receive>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f83a 	bl	8008540 <USBD_Get_USB_Status>
 80084cc:	4603      	mov	r3, r0
 80084ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ec:	78fa      	ldrb	r2, [r7, #3]
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f9 fce3 	bl	8001ebc <HAL_PCD_EP_GetRxCount>
 80084f6:	4603      	mov	r3, r0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_static_malloc+0x14>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	20001178 	.word	0x20001178

08008518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d817      	bhi.n	8008584 <USBD_Get_USB_Status+0x44>
 8008554:	a201      	add	r2, pc, #4	; (adr r2, 800855c <USBD_Get_USB_Status+0x1c>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	0800856d 	.word	0x0800856d
 8008560:	08008573 	.word	0x08008573
 8008564:	08008579 	.word	0x08008579
 8008568:	0800857f 	.word	0x0800857f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	e00b      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008572:	2302      	movs	r3, #2
 8008574:	73fb      	strb	r3, [r7, #15]
    break;
 8008576:	e008      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	e005      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800857e:	2302      	movs	r3, #2
 8008580:	73fb      	strb	r3, [r7, #15]
    break;
 8008582:	e002      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008584:	2302      	movs	r3, #2
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	bf00      	nop
  }
  return usb_status;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	2600      	movs	r6, #0
 800859c:	4d0c      	ldr	r5, [pc, #48]	; (80085d0 <__libc_init_array+0x38>)
 800859e:	4c0d      	ldr	r4, [pc, #52]	; (80085d4 <__libc_init_array+0x3c>)
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	f000 f822 	bl	80085f0 <_init>
 80085ac:	2600      	movs	r6, #0
 80085ae:	4d0a      	ldr	r5, [pc, #40]	; (80085d8 <__libc_init_array+0x40>)
 80085b0:	4c0a      	ldr	r4, [pc, #40]	; (80085dc <__libc_init_array+0x44>)
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	4798      	blx	r3
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	4798      	blx	r3
 80085cc:	3601      	adds	r6, #1
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	080086b4 	.word	0x080086b4
 80085d4:	080086b4 	.word	0x080086b4
 80085d8:	080086b4 	.word	0x080086b4
 80085dc:	080086b8 	.word	0x080086b8

080085e0 <memset>:
 80085e0:	4603      	mov	r3, r0
 80085e2:	4402      	add	r2, r0
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d100      	bne.n	80085ea <memset+0xa>
 80085e8:	4770      	bx	lr
 80085ea:	f803 1b01 	strb.w	r1, [r3], #1
 80085ee:	e7f9      	b.n	80085e4 <memset+0x4>

080085f0 <_init>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

080085fc <_fini>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr
